{"status":"ok","feed":{"url":"https://medium.com/feed/@igorstevanovic99","title":"Stories by Igor Stevanovic on Medium","link":"https://medium.com/@igorstevanovic99?source=rss-89681abbf4e8------2","author":"","description":"Stories by Igor Stevanovic on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*lNZsnZyt_49c2YFsOHO-yg.jpeg"},"items":[{"title":"Jetpack Compose Clean Navigation","pubDate":"2022-10-03 22:14:40","link":"https://betterprogramming.pub/jetpack-compose-clean-navigation-94b386f7a076?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/94b386f7a076","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*Ni1e3G8oYf9eNUL6UhxVCg.png","description":"\n<h4>Implementing clean navigation in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ni1e3G8oYf9eNUL6UhxVCg.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Everybody in the Android world knows that navigation in Jetpack Compose isn\u2019t its brightest side. There are a lot of callbacks and navControllers that you need to pass to execute navigation, and what if you need to do some business logic before sending arguments? Code gets pretty\u00a0messy.</p>\n<p>There are a lot of discussions on how to implement navigation, and <a href=\"https://github.com/raamcosta/compose-destinations\">one great library also</a>. Feel free to check it out, shout out to Rafael Costa for creating something like\u00a0that.</p>\n<p>But what if you don\u2019t want to be dependent on somebody else, or the policy of your company is to not use external libraries? Navigation is one of the most important things in the app. You can\u2019t rely on someone else, even tho that library is maintained 24/7. You need to create a solution, that works well. Before going through my clean solution, let\u2019s dive into the problem so we understand 100% what we are doing\u00a0here.</p>\n<h3>Introduction to the\u00a0Problem</h3>\n<p>The current most common implementation of navigation is\u00a0this:</p>\n<a href=\"https://medium.com/media/3ca72b030753dda7eb8ba40ce3330d21/href\">https://medium.com/media/3ca72b030753dda7eb8ba40ce3330d21/href</a><p>You pass lambdas, and that\u2019s it. The second option is that instead of lambdas you pass navController. Either solution doesn\u2019t look that good. The screen could have too many callbacks if it is complex enough. Your code gets messy a lot. Maybe your logic around routes isn\u2019t hardcoded like this, but you get the point of the\u00a0problem.</p>\n<p>What if you need to do some business logic, for example, calculate something, and the result of the calculation is an argument for the next screen? You need to call ViewModel to do the business logic(the Viewshouldn\u2019t do that), observe the result and then invoke the callback. Too much forwards and backward between the Screen and ViewModel.</p>\n<p>Let\u2019s try to fix all these problems, and make it a little bit\u00a0cleaner.</p>\n<h3>Jetpack Compose Clean Navigation</h3>\n<p>The idea of my solution is to have a custom navigator, that will be provided to every ViewModel. By calling functions of the navigator we are navigating to different screens. All navigation events are collected in the MainScreen and in that way we don\u2019t need to pass callbacks or navController to the other screens. It will be more clear once we go through the\u00a0code.</p>\n<p>First, let\u2019s create a special class for the\u00a0routes:</p>\n<a href=\"https://medium.com/media/86030a80dfa3d30e7fb9558f2c1ad900/href\">https://medium.com/media/86030a80dfa3d30e7fb9558f2c1ad900/href</a><p>Destination has a constructor with two arguments. The first is the base route and the second one is the parameters for that route. Each Destination will have route and fullRoute. The route is a base route without parameters, will use that one to create fullRoute with parameter names or fullRoute with the value of the parameters.</p>\n<p>Invoking Destination will return its route. appendParams function will just add parameters to the route and return fullRoute with the value of the parameters.</p>\n<p>Next is to add some navigation composables we are gonna\u00a0use.</p>\n<a href=\"https://medium.com/media/c0d4a48015456d2bb9f53408e803eacc/href\">https://medium.com/media/c0d4a48015456d2bb9f53408e803eacc/href</a><p>NavHost is the same as one from androidx.navigation.compose the only difference is that startDestination argument is of type Destination.</p>\n<p>Same thing with composable instead of route: String we have destination: Destination.</p>\n<p>Now let\u2019s implement that custom navigator. Here\u2019s the\u00a0code:</p>\n<a href=\"https://medium.com/media/6bce31de4e943ee6ae60dcfc54fe9211/href\">https://medium.com/media/6bce31de4e943ee6ae60dcfc54fe9211/href</a><p>AppNavigator has navigationChannel that will be collected in the MainScreen and it has four functions for navigating. NavigationIntent contains all navigation intents that can happen. You can add here more of them, for example, one for deep links or something like that. Arguments of every NavigationIntent are needed for navController functions.</p>\n<p>Implementation of AppNavigator is pretty straightforward. Just sending NavigationIntents to the navigationChannel.</p>\n<a href=\"https://medium.com/media/3341f702ca035fa73c7b75c1fe7418f9/href\">https://medium.com/media/3341f702ca035fa73c7b75c1fe7418f9/href</a><p>One quick note here, I used Dagger-Hilt as a DI framework. Feel free to use any DI framework.</p>\n<p>Now let\u2019s implement MainScreen:</p>\n<a href=\"https://medium.com/media/0579c98705bc12f7537751a3575c4c3e/href\">https://medium.com/media/0579c98705bc12f7537751a3575c4c3e/href</a><p>In the MainScreen we use our custom NavHost and composable. We remember navController that we pass to NavigationEffects, along with navigationChannel from MainViewModel. NavigationEffects just collect the navigationChannel and navigate to the desired screen. As you can see, it is cleaner and we don\u2019t have to pass any callbacks or navController.</p>\n<p>MainViewModel is simple. Just getting navigationChannel from AppNavigator.</p>\n<a href=\"https://medium.com/media/67ed35c24aef479a8936d754d3198878/href\">https://medium.com/media/67ed35c24aef479a8936d754d3198878/href</a><p>The only thing that is left to show, is how we call navigator functions. Let\u2019s take a look at the example of HomeViewModel.</p>\n<a href=\"https://medium.com/media/95a52e39bb85dea96157645d7b1c4c31/href\">https://medium.com/media/95a52e39bb85dea96157645d7b1c4c31/href</a><p>HomeScreen will call corresponding functions and in HomeViewModel we just call AppNavigator functions and as an argument for the routes we invoke Destination.</p>\n<p>Take a look at UsersViewModel to see examples for navigating back and passing parameters to the\u00a0route.</p>\n<a href=\"https://medium.com/media/a46117c201eecb28278e2b33ef1a3f0a/href\">https://medium.com/media/a46117c201eecb28278e2b33ef1a3f0a/href</a><p>And that\u2019s\u00a0it!</p>\n<h3>Conclusion</h3>\n<p>I think there is still room for improvement, but this could be a good starting point. It made our code a lot cleaner, and there is no need to collect side effects from ViewModel in our screens just so we can navigate.</p>\n<p>We can argue if the navigation should be done from the ViewModel but I think it should be. The View should be \u201cstupid,\u201d and only show data. What we do on click, should be the responsibility of the ViewModel.</p>\n<p>You can find all of the source code in <a href=\"https://github.com/Giga99/MediumRepos/tree/main/navigation\">my GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><a href=\"https://twitter.com/igor_s1999\"><br>Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://medium.com/better-programming/build-a-camera-android-app-in-jetpack-compose-using-camerax-4d5dfbfbe8ec\">Build a Camera Android App in Jetpack Compose Using\u00a0CameraX</a></li>\n</ul>\n<p>Also, you can learn how to use intercepters to include access tokens in your requests by reading this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=94b386f7a076\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-clean-navigation-94b386f7a076\">Jetpack Compose Clean Navigation</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Implementing clean navigation in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ni1e3G8oYf9eNUL6UhxVCg.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Everybody in the Android world knows that navigation in Jetpack Compose isn\u2019t its brightest side. There are a lot of callbacks and navControllers that you need to pass to execute navigation, and what if you need to do some business logic before sending arguments? Code gets pretty\u00a0messy.</p>\n<p>There are a lot of discussions on how to implement navigation, and <a href=\"https://github.com/raamcosta/compose-destinations\">one great library also</a>. Feel free to check it out, shout out to Rafael Costa for creating something like\u00a0that.</p>\n<p>But what if you don\u2019t want to be dependent on somebody else, or the policy of your company is to not use external libraries? Navigation is one of the most important things in the app. You can\u2019t rely on someone else, even tho that library is maintained 24/7. You need to create a solution, that works well. Before going through my clean solution, let\u2019s dive into the problem so we understand 100% what we are doing\u00a0here.</p>\n<h3>Introduction to the\u00a0Problem</h3>\n<p>The current most common implementation of navigation is\u00a0this:</p>\n<a href=\"https://medium.com/media/3ca72b030753dda7eb8ba40ce3330d21/href\">https://medium.com/media/3ca72b030753dda7eb8ba40ce3330d21/href</a><p>You pass lambdas, and that\u2019s it. The second option is that instead of lambdas you pass navController. Either solution doesn\u2019t look that good. The screen could have too many callbacks if it is complex enough. Your code gets messy a lot. Maybe your logic around routes isn\u2019t hardcoded like this, but you get the point of the\u00a0problem.</p>\n<p>What if you need to do some business logic, for example, calculate something, and the result of the calculation is an argument for the next screen? You need to call ViewModel to do the business logic(the Viewshouldn\u2019t do that), observe the result and then invoke the callback. Too much forwards and backward between the Screen and ViewModel.</p>\n<p>Let\u2019s try to fix all these problems, and make it a little bit\u00a0cleaner.</p>\n<h3>Jetpack Compose Clean Navigation</h3>\n<p>The idea of my solution is to have a custom navigator, that will be provided to every ViewModel. By calling functions of the navigator we are navigating to different screens. All navigation events are collected in the MainScreen and in that way we don\u2019t need to pass callbacks or navController to the other screens. It will be more clear once we go through the\u00a0code.</p>\n<p>First, let\u2019s create a special class for the\u00a0routes:</p>\n<a href=\"https://medium.com/media/86030a80dfa3d30e7fb9558f2c1ad900/href\">https://medium.com/media/86030a80dfa3d30e7fb9558f2c1ad900/href</a><p>Destination has a constructor with two arguments. The first is the base route and the second one is the parameters for that route. Each Destination will have route and fullRoute. The route is a base route without parameters, will use that one to create fullRoute with parameter names or fullRoute with the value of the parameters.</p>\n<p>Invoking Destination will return its route. appendParams function will just add parameters to the route and return fullRoute with the value of the parameters.</p>\n<p>Next is to add some navigation composables we are gonna\u00a0use.</p>\n<a href=\"https://medium.com/media/c0d4a48015456d2bb9f53408e803eacc/href\">https://medium.com/media/c0d4a48015456d2bb9f53408e803eacc/href</a><p>NavHost is the same as one from androidx.navigation.compose the only difference is that startDestination argument is of type Destination.</p>\n<p>Same thing with composable instead of route: String we have destination: Destination.</p>\n<p>Now let\u2019s implement that custom navigator. Here\u2019s the\u00a0code:</p>\n<a href=\"https://medium.com/media/6bce31de4e943ee6ae60dcfc54fe9211/href\">https://medium.com/media/6bce31de4e943ee6ae60dcfc54fe9211/href</a><p>AppNavigator has navigationChannel that will be collected in the MainScreen and it has four functions for navigating. NavigationIntent contains all navigation intents that can happen. You can add here more of them, for example, one for deep links or something like that. Arguments of every NavigationIntent are needed for navController functions.</p>\n<p>Implementation of AppNavigator is pretty straightforward. Just sending NavigationIntents to the navigationChannel.</p>\n<a href=\"https://medium.com/media/3341f702ca035fa73c7b75c1fe7418f9/href\">https://medium.com/media/3341f702ca035fa73c7b75c1fe7418f9/href</a><p>One quick note here, I used Dagger-Hilt as a DI framework. Feel free to use any DI framework.</p>\n<p>Now let\u2019s implement MainScreen:</p>\n<a href=\"https://medium.com/media/0579c98705bc12f7537751a3575c4c3e/href\">https://medium.com/media/0579c98705bc12f7537751a3575c4c3e/href</a><p>In the MainScreen we use our custom NavHost and composable. We remember navController that we pass to NavigationEffects, along with navigationChannel from MainViewModel. NavigationEffects just collect the navigationChannel and navigate to the desired screen. As you can see, it is cleaner and we don\u2019t have to pass any callbacks or navController.</p>\n<p>MainViewModel is simple. Just getting navigationChannel from AppNavigator.</p>\n<a href=\"https://medium.com/media/67ed35c24aef479a8936d754d3198878/href\">https://medium.com/media/67ed35c24aef479a8936d754d3198878/href</a><p>The only thing that is left to show, is how we call navigator functions. Let\u2019s take a look at the example of HomeViewModel.</p>\n<a href=\"https://medium.com/media/95a52e39bb85dea96157645d7b1c4c31/href\">https://medium.com/media/95a52e39bb85dea96157645d7b1c4c31/href</a><p>HomeScreen will call corresponding functions and in HomeViewModel we just call AppNavigator functions and as an argument for the routes we invoke Destination.</p>\n<p>Take a look at UsersViewModel to see examples for navigating back and passing parameters to the\u00a0route.</p>\n<a href=\"https://medium.com/media/a46117c201eecb28278e2b33ef1a3f0a/href\">https://medium.com/media/a46117c201eecb28278e2b33ef1a3f0a/href</a><p>And that\u2019s\u00a0it!</p>\n<h3>Conclusion</h3>\n<p>I think there is still room for improvement, but this could be a good starting point. It made our code a lot cleaner, and there is no need to collect side effects from ViewModel in our screens just so we can navigate.</p>\n<p>We can argue if the navigation should be done from the ViewModel but I think it should be. The View should be \u201cstupid,\u201d and only show data. What we do on click, should be the responsibility of the ViewModel.</p>\n<p>You can find all of the source code in <a href=\"https://github.com/Giga99/MediumRepos/tree/main/navigation\">my GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><a href=\"https://twitter.com/igor_s1999\"><br>Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://medium.com/better-programming/build-a-camera-android-app-in-jetpack-compose-using-camerax-4d5dfbfbe8ec\">Build a Camera Android App in Jetpack Compose Using\u00a0CameraX</a></li>\n</ul>\n<p>Also, you can learn how to use intercepters to include access tokens in your requests by reading this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=94b386f7a076\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-clean-navigation-94b386f7a076\">Jetpack Compose Clean Navigation</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["jetpack-compose","kotlin","programming","android-development","android"]},{"title":"Integrate Google Maps Into the Jetpack Compose App","pubDate":"2022-10-03 16:08:29","link":"https://betterprogramming.pub/integrate-google-maps-into-the-jetpack-compose-app-c2710a226af2?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/c2710a226af2","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*aPEjMQ11jouUnuX-o4QYLA.png","description":"\n<h4>Jetpack Compose + Maps Compose\u00a0Library</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aPEjMQ11jouUnuX-o4QYLA.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by Google | base image by\u00a0author</figcaption></figure><p>Today we are gonna talk about how to integrate maps into your Jetpack Compose app. For that, we are gonna use the Maps Compose\u00a0Library.</p>\n<blockquote>\u201cThe Maps Compose library contains composable functions and data types that let you perform many common tasks.\u201d According to <a href=\"https://developers.google.com/maps/documentation/android-sdk/maps-compose\">Maps Compose Library official documentation</a>\n</blockquote>\n<p>First, you need to obtain an API key by following the instructions on this\u00a0page:</p>\n<p><a href=\"https://developers.google.com/maps/documentation/android-sdk/get-api-key\">Using API Keys | Maps SDK for Android | Google Developers</a></p>\n<p>Next, let\u2019s include needed dependencies:</p>\n<pre>implementation 'com.google.maps.android:maps-compose:2.7.2'<br>implementation 'com.google.android.gms:play-services-maps:18.1.0'</pre>\n<p><strong>Note: </strong>Check if there is a newer version of these dependencies.</p>\n<p>Next, in your manifest file, add the following metadata:</p>\n<pre>&lt;meta-data<br>    android:name=\"com.google.android.geo.API_KEY\"<br>    android:value=\"${MAPS_API_KEY}\" /&gt;</pre>\n<p>Now we are ready to implement maps in our\u00a0code!</p>\n<h3>Integrating Maps to the\u00a0App</h3>\n<p>By just calling GoogleMap() we are going to show a map in our app. Simple as that! GoogleMap is a compose container for MapView. It allows us to display maps in our app. We can pass many parameters to this composable, but all of them are optional.</p>\n<p>Some of the parameters are as\u00a0follows:</p>\n<ul>\n<li>cameraPositionState: CameraPositionState\u200a\u2014\u200aused to control or observe the map\u2019s camera\u00a0state.</li>\n<li>googleMapOptionsFactory: () -&gt; GoogleMapOptions\u200a\u2014\u200athe block for creating the GoogleMapOptions provided when the map is\u00a0created.</li>\n<li>properties: MapProperties\u200a\u2014\u200aproperties of the map like isBuildingEnabled, isIndoorEnabled, isMyLocationEnabled, and so on. If isMyLocationEnabled is set to true, then we need to request permissions for fine and coarse locations. To learn how to request location permissions in Jetpack compose take a look at one of <a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">my previous articles</a>.</li>\n<li>uiSettings: MapUiSettings\u2014 UI-specific settings on the map like compassEnabled, scrollGesturesEnabled, rotationGesturesEnabled, and so\u00a0on.</li>\n<li>various lambdas like onMapClicked, onMapLoaded, onMyLocationButtonClick.</li>\n</ul>\n<p>Next, we can set the camera state to zoom in on some specific location.</p>\n<pre>val cameraPositionState = <em>rememberCameraPositionState </em><strong>{<br></strong>position = CameraPosition.fromLatLngZoom(LatLng(44.810058, 20.4617586), 16f)<br><strong>}</strong></pre>\n<p>We could also get the last location or the current. For more info about that check <a href=\"https://developer.android.com/training/location/retrieve-current\">this documentation</a>.</p>\n<h4>Markers</h4>\n<p>What if we want to mark places, for example, nearest gas stations, hotels, or whatever you need? Library got us covered. We can use Markers for\u00a0that.</p>\n<p>Marker composable has a couple of parameters. We will go through the most commonly used, but feel free to check them\u00a0all.</p>\n<ul>\n<li>state: MarkerState\u200a\u2014\u200aused to control or observe the marker state such as its position and info\u00a0window.</li>\n<li>draggable: Boolean\u200a\u2014\u200asets the draggability for the\u00a0marker.</li>\n<li>flat: Boolean\u200a\u2014\u200asets if the marker should be flat against the\u00a0map.</li>\n<li>icon: BitmapDescriptor\u200a\u2014\u200asets the icon for the\u00a0marker.</li>\n<li>various lambdas like onClick, onInfoWindowClick, onInfoWindowClose and onInfoWindowLongClick.</li>\n</ul>\n<p>Now, let\u2019s add some markers with different colors. Here\u2019s the\u00a0code:</p>\n<a href=\"https://medium.com/media/4c75dd7805807006d3649f733ea0046d/href\">https://medium.com/media/4c75dd7805807006d3649f733ea0046d/href</a><p>You can also get an icon of the marker from the asset, resource, bitmap, file, and so on. If you click on any of the markers you will see an info window with the title of the\u00a0marker.</p>\n<h4>Polyline</h4>\n<p>The next thing that we could do is to draw a line between points. We can use Polyline for\u00a0that.</p>\n<p>It has only one required parameter and that is the list of latitudes and longitudes. Some other parameters are:</p>\n<ul>\n<li>clickable: Boolean\u200a\u2014\u200aboolean indicating if the polyline is clickable or\u00a0not</li>\n<li>color: Color\u200a\u2014\u200athe color of the\u00a0polyline</li>\n<li>startCap: Cap\u200a\u2014\u200athe cap at the start vertex of the\u00a0polyline</li>\n<li>endCap: Cap\u200a\u2014\u200athe cap at the end vertex of the\u00a0polyline</li>\n<li>width: Float\u200a\u2014\u200athe width of the polyline in screen\u00a0pixels</li>\n<li>onClick: (Polyline) -&gt; Unit\u200a\u2014\u200aa lambda invoked when the polyline is\u00a0clicked</li>\n</ul>\n<p>We will just add one Polyline that will connect the\u00a0markers:</p>\n<a href=\"https://medium.com/media/a5712da10e5c58f1a8caf84e35725360/href\">https://medium.com/media/a5712da10e5c58f1a8caf84e35725360/href</a><p>The final code looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/182ef2164a160e3c506c35fab18ddf73/href\">https://medium.com/media/182ef2164a160e3c506c35fab18ddf73/href</a><p>There are many options and composables that we can use around maps, but no need to go through all of them now. Feel free to check them out in <a href=\"https://developers.google.com/maps/documentation/android-sdk/maps-compose\">the official documentation</a>.</p>\n<p>That\u2019s it for our MapsApp, I hope you learned something new in this article and that you like\u00a0it.</p>\n<p>You can find all of the source code in <a href=\"https://github.com/Giga99/MediumRepos/tree/main/maps\">my GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><a href=\"https://twitter.com/igor_s1999\"><br>Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://medium.com/better-programming/build-a-camera-android-app-in-jetpack-compose-using-camerax-4d5dfbfbe8ec\">Build a Camera Android App in Jetpack Compose Using\u00a0CameraX</a></li>\n</ul>\n<p>Also, you can learn how to use intercepters to include access tokens in your requests by reading this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://developers.google.com/maps/documentation/android-sdk/maps-compose\">Maps Compose Library | Maps SDK for Android | Google Developers</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c2710a226af2\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/integrate-google-maps-into-the-jetpack-compose-app-c2710a226af2\">Integrate Google Maps Into the Jetpack Compose App</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Jetpack Compose + Maps Compose\u00a0Library</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aPEjMQ11jouUnuX-o4QYLA.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by Google | base image by\u00a0author</figcaption></figure><p>Today we are gonna talk about how to integrate maps into your Jetpack Compose app. For that, we are gonna use the Maps Compose\u00a0Library.</p>\n<blockquote>\u201cThe Maps Compose library contains composable functions and data types that let you perform many common tasks.\u201d According to <a href=\"https://developers.google.com/maps/documentation/android-sdk/maps-compose\">Maps Compose Library official documentation</a>\n</blockquote>\n<p>First, you need to obtain an API key by following the instructions on this\u00a0page:</p>\n<p><a href=\"https://developers.google.com/maps/documentation/android-sdk/get-api-key\">Using API Keys | Maps SDK for Android | Google Developers</a></p>\n<p>Next, let\u2019s include needed dependencies:</p>\n<pre>implementation 'com.google.maps.android:maps-compose:2.7.2'<br>implementation 'com.google.android.gms:play-services-maps:18.1.0'</pre>\n<p><strong>Note: </strong>Check if there is a newer version of these dependencies.</p>\n<p>Next, in your manifest file, add the following metadata:</p>\n<pre>&lt;meta-data<br>    android:name=\"com.google.android.geo.API_KEY\"<br>    android:value=\"${MAPS_API_KEY}\" /&gt;</pre>\n<p>Now we are ready to implement maps in our\u00a0code!</p>\n<h3>Integrating Maps to the\u00a0App</h3>\n<p>By just calling GoogleMap() we are going to show a map in our app. Simple as that! GoogleMap is a compose container for MapView. It allows us to display maps in our app. We can pass many parameters to this composable, but all of them are optional.</p>\n<p>Some of the parameters are as\u00a0follows:</p>\n<ul>\n<li>cameraPositionState: CameraPositionState\u200a\u2014\u200aused to control or observe the map\u2019s camera\u00a0state.</li>\n<li>googleMapOptionsFactory: () -&gt; GoogleMapOptions\u200a\u2014\u200athe block for creating the GoogleMapOptions provided when the map is\u00a0created.</li>\n<li>properties: MapProperties\u200a\u2014\u200aproperties of the map like isBuildingEnabled, isIndoorEnabled, isMyLocationEnabled, and so on. If isMyLocationEnabled is set to true, then we need to request permissions for fine and coarse locations. To learn how to request location permissions in Jetpack compose take a look at one of <a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">my previous articles</a>.</li>\n<li>uiSettings: MapUiSettings\u2014 UI-specific settings on the map like compassEnabled, scrollGesturesEnabled, rotationGesturesEnabled, and so\u00a0on.</li>\n<li>various lambdas like onMapClicked, onMapLoaded, onMyLocationButtonClick.</li>\n</ul>\n<p>Next, we can set the camera state to zoom in on some specific location.</p>\n<pre>val cameraPositionState = <em>rememberCameraPositionState </em><strong>{<br></strong>position = CameraPosition.fromLatLngZoom(LatLng(44.810058, 20.4617586), 16f)<br><strong>}</strong></pre>\n<p>We could also get the last location or the current. For more info about that check <a href=\"https://developer.android.com/training/location/retrieve-current\">this documentation</a>.</p>\n<h4>Markers</h4>\n<p>What if we want to mark places, for example, nearest gas stations, hotels, or whatever you need? Library got us covered. We can use Markers for\u00a0that.</p>\n<p>Marker composable has a couple of parameters. We will go through the most commonly used, but feel free to check them\u00a0all.</p>\n<ul>\n<li>state: MarkerState\u200a\u2014\u200aused to control or observe the marker state such as its position and info\u00a0window.</li>\n<li>draggable: Boolean\u200a\u2014\u200asets the draggability for the\u00a0marker.</li>\n<li>flat: Boolean\u200a\u2014\u200asets if the marker should be flat against the\u00a0map.</li>\n<li>icon: BitmapDescriptor\u200a\u2014\u200asets the icon for the\u00a0marker.</li>\n<li>various lambdas like onClick, onInfoWindowClick, onInfoWindowClose and onInfoWindowLongClick.</li>\n</ul>\n<p>Now, let\u2019s add some markers with different colors. Here\u2019s the\u00a0code:</p>\n<a href=\"https://medium.com/media/4c75dd7805807006d3649f733ea0046d/href\">https://medium.com/media/4c75dd7805807006d3649f733ea0046d/href</a><p>You can also get an icon of the marker from the asset, resource, bitmap, file, and so on. If you click on any of the markers you will see an info window with the title of the\u00a0marker.</p>\n<h4>Polyline</h4>\n<p>The next thing that we could do is to draw a line between points. We can use Polyline for\u00a0that.</p>\n<p>It has only one required parameter and that is the list of latitudes and longitudes. Some other parameters are:</p>\n<ul>\n<li>clickable: Boolean\u200a\u2014\u200aboolean indicating if the polyline is clickable or\u00a0not</li>\n<li>color: Color\u200a\u2014\u200athe color of the\u00a0polyline</li>\n<li>startCap: Cap\u200a\u2014\u200athe cap at the start vertex of the\u00a0polyline</li>\n<li>endCap: Cap\u200a\u2014\u200athe cap at the end vertex of the\u00a0polyline</li>\n<li>width: Float\u200a\u2014\u200athe width of the polyline in screen\u00a0pixels</li>\n<li>onClick: (Polyline) -&gt; Unit\u200a\u2014\u200aa lambda invoked when the polyline is\u00a0clicked</li>\n</ul>\n<p>We will just add one Polyline that will connect the\u00a0markers:</p>\n<a href=\"https://medium.com/media/a5712da10e5c58f1a8caf84e35725360/href\">https://medium.com/media/a5712da10e5c58f1a8caf84e35725360/href</a><p>The final code looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/182ef2164a160e3c506c35fab18ddf73/href\">https://medium.com/media/182ef2164a160e3c506c35fab18ddf73/href</a><p>There are many options and composables that we can use around maps, but no need to go through all of them now. Feel free to check them out in <a href=\"https://developers.google.com/maps/documentation/android-sdk/maps-compose\">the official documentation</a>.</p>\n<p>That\u2019s it for our MapsApp, I hope you learned something new in this article and that you like\u00a0it.</p>\n<p>You can find all of the source code in <a href=\"https://github.com/Giga99/MediumRepos/tree/main/maps\">my GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><a href=\"https://twitter.com/igor_s1999\"><br>Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://medium.com/better-programming/build-a-camera-android-app-in-jetpack-compose-using-camerax-4d5dfbfbe8ec\">Build a Camera Android App in Jetpack Compose Using\u00a0CameraX</a></li>\n</ul>\n<p>Also, you can learn how to use intercepters to include access tokens in your requests by reading this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://developers.google.com/maps/documentation/android-sdk/maps-compose\">Maps Compose Library | Maps SDK for Android | Google Developers</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c2710a226af2\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/integrate-google-maps-into-the-jetpack-compose-app-c2710a226af2\">Integrate Google Maps Into the Jetpack Compose App</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["android-development","programming","android","jetpack-compose","software-development"]},{"title":"Build a Camera Android App in Jetpack Compose Using CameraX","pubDate":"2022-09-14 03:48:16","link":"https://betterprogramming.pub/build-a-camera-android-app-in-jetpack-compose-using-camerax-4d5dfbfbe8ec?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/4d5dfbfbe8ec","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*Eksq1mAFNoZyKSkDTQhCZQ.png","description":"\n<h4>Jetpack Compose +\u00a0CameraX</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Eksq1mAFNoZyKSkDTQhCZQ.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Thinking about creating a Camera app or do you need to record video in your app? The CameraX library is a great way to do it. Today, I am gonna explain to you how to create a Camera app using the CameraX library as it is recommended way by\u00a0Google.</p>\n<blockquote>\u201cCameraX is a Jetpack library, built to help make camera app development easier.\u201d According to the <a href=\"https://developer.android.com/training/camerax\">CameraX official documentation</a>\n</blockquote>\n<p>There are a couple of use cases where you can use the\u00a0CameraX:</p>\n<ul>\n<li>\n<a href=\"https://developer.android.com/training/camerax/take-photo\">Image Capture</a>\u200a\u2014\u200a<em>Save\u00a0images</em>\n</li>\n<li>\n<a href=\"https://developer.android.com/training/camerax/video-capture\">Video Capture</a>\u200a\u2014\u200a<em>Save videos and\u00a0audio</em>\n</li>\n<li>\n<a href=\"https://developer.android.com/training/camerax/preview\">Preview</a>\u200a\u2014\u200a<em>View the image on the\u00a0display</em>\n</li>\n<li>\n<a href=\"https://developer.android.com/training/camerax/analyze\">Image Analysis</a>\u200a\u2014\u200a<em>Access a buffer seamlessly for use in your algorithms</em>\n</li>\n</ul>\n<p>In this article, we are going to go through the Video Capture as it is not that much-treated topic.</p>\n<h4>Video Capture</h4>\n<p>First, let\u2019s add some dependencies:</p>\n<a href=\"https://medium.com/media/dc663830f4ad1a39cb59bea16a2d8c4a/href\">https://medium.com/media/dc663830f4ad1a39cb59bea16a2d8c4a/href</a><p>Now, our main screen will record the video, but first, we need to ask for camera and audio permissions. Won\u2019t go into that in detail as I already explained in <a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">one of my previous articles</a>, take a look if you need more explanation.</p>\n<a href=\"https://medium.com/media/c25c72085daaff494c7ae8daae1e6800/href\">https://medium.com/media/c25c72085daaff494c7ae8daae1e6800/href</a><p>Now we are gonna create a couple of objects which we are going to need to record the\u00a0video.</p>\n<a href=\"https://medium.com/media/c747d90fadb0b8e5d6a1502348e78b87/href\">https://medium.com/media/c747d90fadb0b8e5d6a1502348e78b87/href</a><p>A Recording is an object that allows us to control current active recording. It will allow us to stop, pause and resume the current recording. We create that object when we start recording. <br>PreviewView is a custom view that will display the camera feed. We will bind it to the lifecycle, add it to the AndroidView and it will show us what we are currently recording. <br>VideoCapture is a generic class that provides a camera stream suitable for video applications. Here we pass the Recorder class which is an implementation of the VideoOutput interface and it allows us to start recording. <br>The recordingStarted and the audioEnabled are helper variables that we will use in this screen and I think they are pretty much self-explanatory.<br>CameraSelector is a set of requirements and priorities used to select a camera or return a filtered set of cameras. Here we will just use the default front and back camera. <br>In the LaunchedEffect we are calling a function that will create us a video capture use case. The function looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/4ab4093d41a00dcb945678e56d7e888f/href\">https://medium.com/media/4ab4093d41a00dcb945678e56d7e888f/href</a><p>First, we create a Preview which is a use case that provides a camera preview stream for displaying on-screen. We can set multiple things here like aspect ratio, capture processor, image info processor, and so on. We won\u2019t need them so we create plain Preview object.<br>Next is to choose the quality of our video. For that, we use QualitySelector which defines the desired quality setting. We want Full HD quality so we will pass Quality.FHD. Some phones may not have desired quality so you should always have a backup plan as we did it here by passing FallbackStrategy. There are a couple of strategies:</p>\n<ul>\n<li>higherQualityOrLowerThan\u200a\u2014\u200a<em>Choose the quality that is closest to and higher than the input quality. If that can not result in a supported quality, choose the quality that is closest to and lower than the input\u00a0quality</em>\n</li>\n<li>higherQualityThan<em>\u200a\u2014\u200aChoose the quality that is closest to and higher than the input\u00a0quality</em>\n</li>\n<li>lowerQualityOrHigherThan\u200a\u2014\u200a<em>Choose the quality that is closest to and lower than the input quality. If that can not result in a supported quality, choose the quality that is closest to and higher than the input\u00a0quality</em>\n</li>\n<li>lowerQualityThan\u200a\u2014\u200a<em>Choose the quality that is closest to and higher than the input\u00a0quality</em>\n</li>\n</ul>\n<p>One more way to do it is to just pass Quality.LOWEST or Quality.HIGHEST, which is probably the simpler way but I wanted also to show this one.<br>Now we create an Recorder and use it to get the VideoCapture object by calling VideoCapture.withOutput(recorder).<br>A camera provider is an object of ProcessCameraProvider singleton that allows us to bind the lifecycle of cameras to any LifecycleOwner within an application\u2019s process. The function that we are using to get a camera provider\u00a0is:</p>\n<a href=\"https://medium.com/media/b34c9b9c79213faaba20b00f72abb3f9/href\">https://medium.com/media/b34c9b9c79213faaba20b00f72abb3f9/href</a><p>ProcessCameraProvider.getInstance(this) is returning future that we need to wait to finish to get an instance.<br>Next, we need to bind everything to the lifecycle and we pass lifecycleOwner, cameraSelector, preview, and videoCapture.</p>\n<p>Now it is time to finish the rest of the compose code, I hope you are still with\u00a0me!</p>\n<p>Inside PermissionsRequired content block, we add AndroidView and button for recording. Like\u00a0this:</p>\n<a href=\"https://medium.com/media/17f781dae92636127869c45f2d1881f7/href\">https://medium.com/media/17f781dae92636127869c45f2d1881f7/href</a><p>AndroidView will display our preview.<br>As for the button, we will use it to start and stop recording. When we want to start recording we first get the media directory where we will put the video, if the directory doesn\u2019t exist, we just create it. Next is to call startRecordingVideo function that looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/8dc1f3e8cf04b8ef7d4f5938f39b28a8/href\">https://medium.com/media/8dc1f3e8cf04b8ef7d4f5938f39b28a8/href</a><p>A simple function that creates a file, prepares a recording, and starts it. If audio is enabled we will also start recording with audio enabled. An object that this function returns, we will use to stop the recording. The consumer parameter is a callback that will be called on each event. You can use it to get the URI of the file after the video recording is finished.</p>\n<p>Let\u2019s just add the logic for the audio and camera selector.</p>\n<a href=\"https://medium.com/media/a99ed51b2dce5bd212b62577af845d65/href\">https://medium.com/media/a99ed51b2dce5bd212b62577af845d65/href</a><p>They are two buttons that will enable-disable audio and switch between the front and back camera. When we switch between cameras we need to create a new videoCapture object to change what is our preview displaying.</p>\n<p>That is it for this screen, but now it would be nice to see what have we recorded right? Of course, for that, we are gonna create another screen and use ExoPlayer to display the\u00a0video.</p>\n<p>Let\u2019s just first add logic in our consumer callback:</p>\n<pre>if (event is VideoRecordEvent.Finalize) {<br>    val uri = event.<em>outputResults</em>.<em>outputUri<br></em>if (uri != Uri.<em>EMPTY</em>) {<br>        val uriEncoded = URLEncoder.encode(<br>            uri.toString(),<br>            StandardCharsets.<em>UTF_8</em>.toString()<br>        )<br>        navController.navigate(\"${Route.VIDEO_PREVIEW}/$uriEncoded\")<br>    }<br>}</pre>\n<p>If event is VideoRecordEvent.Finalize, that means that the recording is finished and we can get the URI of the video. There are a couple of video record events, you can use any of them but here we just need Finalize:</p>\n<ul>\n<li>Start</li>\n<li>Finalize</li>\n<li>Status</li>\n<li>Pause</li>\n<li>Resume</li>\n</ul>\n<p>URI can be empty if the video is too short, like under half of the second or something like that and that\u2019s why we need that if statement.<br>URI should be encoded to pass it as the navigation argument.</p>\n<p>Our final code for this screen looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/4a7451937c0d06fe211e0a2b3dcf63d8/href\">https://medium.com/media/4a7451937c0d06fe211e0a2b3dcf63d8/href</a><h4>ExoPlayer</h4>\n<p>ExoPlayer is an alternative to Android\u2019s MediaPlayer API for playing audio and video both locally and over the Internet. It is easier to use and provides more features. Also, it is easy to customize and\u00a0extend.</p>\n<p>Now when we know what is the ExoPlayer, let\u2019s create our next screen. Add dependency:</p>\n<pre>//ExoPlayer Library<br>exoPlayerVersion = '2.18.1'<br>implementation \"com.google.android.exoplayer:exoplayer:$exoPlayerVersion\"</pre>\n<p>Our screen should look like\u00a0this:</p>\n<a href=\"https://medium.com/media/a3733f82df36f50da0a0c7f6f95ae044/href\">https://medium.com/media/a3733f82df36f50da0a0c7f6f95ae044/href</a><p>We will use a builder to create ExoPlayer, set the URI of the video which will be loaded, and then prepare the\u00a0player.</p>\n<p>We use AndroidView to show our video and we will attach StyledPlayerView to\u00a0it.</p>\n<p>StyledPlayerView is a high-level view for Player media playbacks. It displays video, subtitles, and album art during playback, and displays playback controls using a StyledPlayerControlView.<br>The StyledPlayerView can be customized by setting attributes (or calling corresponding methods), or overriding drawable.</p>\n<p>That\u2019s it for our video recorder, I hope you learned something new in this article and that you like\u00a0it.</p>\n<p>You can find all of the source code in <a href=\"https://github.com/Giga99/CameraApp\">my GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><a href=\"https://twitter.com/igor_s1999\"><br>Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack\u00a0Compose</a></li>\n</ul>\n<p>Also, you can learn how to use intercepters to include access tokens in your requests by reading this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://developer.android.com/training/camerax\">https://developer.android.com/training/camerax</a></p>\n<p><a href=\"https://exoplayer.dev/\">ExoPlayer</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4d5dfbfbe8ec\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/build-a-camera-android-app-in-jetpack-compose-using-camerax-4d5dfbfbe8ec\">Build a Camera Android App in Jetpack Compose Using CameraX</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Jetpack Compose +\u00a0CameraX</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Eksq1mAFNoZyKSkDTQhCZQ.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Thinking about creating a Camera app or do you need to record video in your app? The CameraX library is a great way to do it. Today, I am gonna explain to you how to create a Camera app using the CameraX library as it is recommended way by\u00a0Google.</p>\n<blockquote>\u201cCameraX is a Jetpack library, built to help make camera app development easier.\u201d According to the <a href=\"https://developer.android.com/training/camerax\">CameraX official documentation</a>\n</blockquote>\n<p>There are a couple of use cases where you can use the\u00a0CameraX:</p>\n<ul>\n<li>\n<a href=\"https://developer.android.com/training/camerax/take-photo\">Image Capture</a>\u200a\u2014\u200a<em>Save\u00a0images</em>\n</li>\n<li>\n<a href=\"https://developer.android.com/training/camerax/video-capture\">Video Capture</a>\u200a\u2014\u200a<em>Save videos and\u00a0audio</em>\n</li>\n<li>\n<a href=\"https://developer.android.com/training/camerax/preview\">Preview</a>\u200a\u2014\u200a<em>View the image on the\u00a0display</em>\n</li>\n<li>\n<a href=\"https://developer.android.com/training/camerax/analyze\">Image Analysis</a>\u200a\u2014\u200a<em>Access a buffer seamlessly for use in your algorithms</em>\n</li>\n</ul>\n<p>In this article, we are going to go through the Video Capture as it is not that much-treated topic.</p>\n<h4>Video Capture</h4>\n<p>First, let\u2019s add some dependencies:</p>\n<a href=\"https://medium.com/media/dc663830f4ad1a39cb59bea16a2d8c4a/href\">https://medium.com/media/dc663830f4ad1a39cb59bea16a2d8c4a/href</a><p>Now, our main screen will record the video, but first, we need to ask for camera and audio permissions. Won\u2019t go into that in detail as I already explained in <a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">one of my previous articles</a>, take a look if you need more explanation.</p>\n<a href=\"https://medium.com/media/c25c72085daaff494c7ae8daae1e6800/href\">https://medium.com/media/c25c72085daaff494c7ae8daae1e6800/href</a><p>Now we are gonna create a couple of objects which we are going to need to record the\u00a0video.</p>\n<a href=\"https://medium.com/media/c747d90fadb0b8e5d6a1502348e78b87/href\">https://medium.com/media/c747d90fadb0b8e5d6a1502348e78b87/href</a><p>A Recording is an object that allows us to control current active recording. It will allow us to stop, pause and resume the current recording. We create that object when we start recording. <br>PreviewView is a custom view that will display the camera feed. We will bind it to the lifecycle, add it to the AndroidView and it will show us what we are currently recording. <br>VideoCapture is a generic class that provides a camera stream suitable for video applications. Here we pass the Recorder class which is an implementation of the VideoOutput interface and it allows us to start recording. <br>The recordingStarted and the audioEnabled are helper variables that we will use in this screen and I think they are pretty much self-explanatory.<br>CameraSelector is a set of requirements and priorities used to select a camera or return a filtered set of cameras. Here we will just use the default front and back camera. <br>In the LaunchedEffect we are calling a function that will create us a video capture use case. The function looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/4ab4093d41a00dcb945678e56d7e888f/href\">https://medium.com/media/4ab4093d41a00dcb945678e56d7e888f/href</a><p>First, we create a Preview which is a use case that provides a camera preview stream for displaying on-screen. We can set multiple things here like aspect ratio, capture processor, image info processor, and so on. We won\u2019t need them so we create plain Preview object.<br>Next is to choose the quality of our video. For that, we use QualitySelector which defines the desired quality setting. We want Full HD quality so we will pass Quality.FHD. Some phones may not have desired quality so you should always have a backup plan as we did it here by passing FallbackStrategy. There are a couple of strategies:</p>\n<ul>\n<li>higherQualityOrLowerThan\u200a\u2014\u200a<em>Choose the quality that is closest to and higher than the input quality. If that can not result in a supported quality, choose the quality that is closest to and lower than the input\u00a0quality</em>\n</li>\n<li>higherQualityThan<em>\u200a\u2014\u200aChoose the quality that is closest to and higher than the input\u00a0quality</em>\n</li>\n<li>lowerQualityOrHigherThan\u200a\u2014\u200a<em>Choose the quality that is closest to and lower than the input quality. If that can not result in a supported quality, choose the quality that is closest to and higher than the input\u00a0quality</em>\n</li>\n<li>lowerQualityThan\u200a\u2014\u200a<em>Choose the quality that is closest to and higher than the input\u00a0quality</em>\n</li>\n</ul>\n<p>One more way to do it is to just pass Quality.LOWEST or Quality.HIGHEST, which is probably the simpler way but I wanted also to show this one.<br>Now we create an Recorder and use it to get the VideoCapture object by calling VideoCapture.withOutput(recorder).<br>A camera provider is an object of ProcessCameraProvider singleton that allows us to bind the lifecycle of cameras to any LifecycleOwner within an application\u2019s process. The function that we are using to get a camera provider\u00a0is:</p>\n<a href=\"https://medium.com/media/b34c9b9c79213faaba20b00f72abb3f9/href\">https://medium.com/media/b34c9b9c79213faaba20b00f72abb3f9/href</a><p>ProcessCameraProvider.getInstance(this) is returning future that we need to wait to finish to get an instance.<br>Next, we need to bind everything to the lifecycle and we pass lifecycleOwner, cameraSelector, preview, and videoCapture.</p>\n<p>Now it is time to finish the rest of the compose code, I hope you are still with\u00a0me!</p>\n<p>Inside PermissionsRequired content block, we add AndroidView and button for recording. Like\u00a0this:</p>\n<a href=\"https://medium.com/media/17f781dae92636127869c45f2d1881f7/href\">https://medium.com/media/17f781dae92636127869c45f2d1881f7/href</a><p>AndroidView will display our preview.<br>As for the button, we will use it to start and stop recording. When we want to start recording we first get the media directory where we will put the video, if the directory doesn\u2019t exist, we just create it. Next is to call startRecordingVideo function that looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/8dc1f3e8cf04b8ef7d4f5938f39b28a8/href\">https://medium.com/media/8dc1f3e8cf04b8ef7d4f5938f39b28a8/href</a><p>A simple function that creates a file, prepares a recording, and starts it. If audio is enabled we will also start recording with audio enabled. An object that this function returns, we will use to stop the recording. The consumer parameter is a callback that will be called on each event. You can use it to get the URI of the file after the video recording is finished.</p>\n<p>Let\u2019s just add the logic for the audio and camera selector.</p>\n<a href=\"https://medium.com/media/a99ed51b2dce5bd212b62577af845d65/href\">https://medium.com/media/a99ed51b2dce5bd212b62577af845d65/href</a><p>They are two buttons that will enable-disable audio and switch between the front and back camera. When we switch between cameras we need to create a new videoCapture object to change what is our preview displaying.</p>\n<p>That is it for this screen, but now it would be nice to see what have we recorded right? Of course, for that, we are gonna create another screen and use ExoPlayer to display the\u00a0video.</p>\n<p>Let\u2019s just first add logic in our consumer callback:</p>\n<pre>if (event is VideoRecordEvent.Finalize) {<br>    val uri = event.<em>outputResults</em>.<em>outputUri<br></em>if (uri != Uri.<em>EMPTY</em>) {<br>        val uriEncoded = URLEncoder.encode(<br>            uri.toString(),<br>            StandardCharsets.<em>UTF_8</em>.toString()<br>        )<br>        navController.navigate(\"${Route.VIDEO_PREVIEW}/$uriEncoded\")<br>    }<br>}</pre>\n<p>If event is VideoRecordEvent.Finalize, that means that the recording is finished and we can get the URI of the video. There are a couple of video record events, you can use any of them but here we just need Finalize:</p>\n<ul>\n<li>Start</li>\n<li>Finalize</li>\n<li>Status</li>\n<li>Pause</li>\n<li>Resume</li>\n</ul>\n<p>URI can be empty if the video is too short, like under half of the second or something like that and that\u2019s why we need that if statement.<br>URI should be encoded to pass it as the navigation argument.</p>\n<p>Our final code for this screen looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/4a7451937c0d06fe211e0a2b3dcf63d8/href\">https://medium.com/media/4a7451937c0d06fe211e0a2b3dcf63d8/href</a><h4>ExoPlayer</h4>\n<p>ExoPlayer is an alternative to Android\u2019s MediaPlayer API for playing audio and video both locally and over the Internet. It is easier to use and provides more features. Also, it is easy to customize and\u00a0extend.</p>\n<p>Now when we know what is the ExoPlayer, let\u2019s create our next screen. Add dependency:</p>\n<pre>//ExoPlayer Library<br>exoPlayerVersion = '2.18.1'<br>implementation \"com.google.android.exoplayer:exoplayer:$exoPlayerVersion\"</pre>\n<p>Our screen should look like\u00a0this:</p>\n<a href=\"https://medium.com/media/a3733f82df36f50da0a0c7f6f95ae044/href\">https://medium.com/media/a3733f82df36f50da0a0c7f6f95ae044/href</a><p>We will use a builder to create ExoPlayer, set the URI of the video which will be loaded, and then prepare the\u00a0player.</p>\n<p>We use AndroidView to show our video and we will attach StyledPlayerView to\u00a0it.</p>\n<p>StyledPlayerView is a high-level view for Player media playbacks. It displays video, subtitles, and album art during playback, and displays playback controls using a StyledPlayerControlView.<br>The StyledPlayerView can be customized by setting attributes (or calling corresponding methods), or overriding drawable.</p>\n<p>That\u2019s it for our video recorder, I hope you learned something new in this article and that you like\u00a0it.</p>\n<p>You can find all of the source code in <a href=\"https://github.com/Giga99/CameraApp\">my GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><a href=\"https://twitter.com/igor_s1999\"><br>Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack\u00a0Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack\u00a0Compose</a></li>\n</ul>\n<p>Also, you can learn how to use intercepters to include access tokens in your requests by reading this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://developer.android.com/training/camerax\">https://developer.android.com/training/camerax</a></p>\n<p><a href=\"https://exoplayer.dev/\">ExoPlayer</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4d5dfbfbe8ec\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/build-a-camera-android-app-in-jetpack-compose-using-camerax-4d5dfbfbe8ec\">Build a Camera Android App in Jetpack Compose Using CameraX</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["jetpack-compose","mobile-app-development","android-app-development","android","programming"]},{"title":"Implement Bottom Sheet in Jetpack Compose","pubDate":"2022-08-24 17:17:57","link":"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/d6472e8eaf2e","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*tlbbPokxXmjPSa0u7sWWzw.png","description":"\n<h4>A short guide for developers</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tlbbPokxXmjPSa0u7sWWzw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Jetpack Compose brings us so many good things. Working on UI is just a pleasure compared to an XML. One of the things it brings us is the out-of-the-box way to implement bottom sheets. No need to include any dependency. Everything is already\u00a0there.</p>\n<blockquote>\u201cModal bottom sheets present a set of choices while blocking interaction with the rest of the screen. They are an alternative to inline menus and simple dialogs, providing additional room for content, iconography, and actions.\u201d According to <a href=\"https://developer.android.com/reference/kotlin/androidx/compose/material/package-summary#ModalBottomSheetLayout(kotlin.Function1,androidx.compose.ui.Modifier,androidx.compose.material.ModalBottomSheetState,androidx.compose.ui.graphics.Shape,androidx.compose.ui.unit.Dp,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,kotlin.Function0)\">the official documentation</a>\n</blockquote>\n<p>We are gonna use ModalBottomSheetLayout which has its own state that we need to remember. So let\u2019s get on with\u00a0it.</p>\n<p>First, we are gonna create sheetState:</p>\n<a href=\"https://medium.com/media/9103c5800e598e5d002d66a482811093/href\">https://medium.com/media/9103c5800e598e5d002d66a482811093/href</a><p>There are three ModalBottomSheetValues:</p>\n<ul>\n<li>Hidden</li>\n<li>Expanded</li>\n<li>HalfExpanded</li>\n</ul>\n<p>The first two are describing enough. HalfExpanded will only show half of the bottom sheet, and this state is enabled only if the height of the bottom sheet is more than 50% of the screen\u00a0height.</p>\n<p>confirmStateChange is an optional callback invoked to confirm or veto a pending state change. With a value like that, we are blocking HalfExpanded bottom sheet\u00a0value.</p>\n<p>Don\u2019t forget to add @OptIn(ExperimentalMaterialApi::class) as this is all still experimental.</p>\n<p>Next, we can now implement ModalBottomSheetLayout and inside its content put the whole screen. Our screen will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href\">https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href</a><p>As we can see, we put our screen composables inside the ModalBottomSheetLayout\u2019s content. Also, we pass sheetState as an argument.<br>BackHandler is an effect for handling presses of the system back button. The first argument is when it is enabled, and the second is what it should do when the system back button is\u00a0pressed.</p>\n<p>In this case, we just want to hide the bottom sheet if it is shown and the system back button is\u00a0pressed.</p>\n<p>Button inside the Column is showing and hiding the bottom sheet. sheetState.show() will show the bottom sheet with animation and sheetState.hide() will hide the bottom sheet with animation.</p>\n<p>And the last thing that we need to see here is BottomSheet composable:</p>\n<a href=\"https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href\">https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href</a><p>Which is a really simple column filled with some text. You can put here whatever you\u00a0want.</p>\n<p>If you want to have some buttons that do something, you will just communicate via callbacks with the main composable.</p>\n<p>This is pretty simple logic but very useful to know. One note here, the logic for showing and hiding the bottom sheet is put in the UI, but it should be handled by the ViewModel. That is a little bit out of the scope of this article, as I just wanted to show how you can create a bottom\u00a0sheet.</p>\n<p>That would be all for this article. I hope you liked\u00a0it!</p>\n<p>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/bottomsheet\">GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d6472e8eaf2e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>A short guide for developers</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tlbbPokxXmjPSa0u7sWWzw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Jetpack Compose brings us so many good things. Working on UI is just a pleasure compared to an XML. One of the things it brings us is the out-of-the-box way to implement bottom sheets. No need to include any dependency. Everything is already\u00a0there.</p>\n<blockquote>\u201cModal bottom sheets present a set of choices while blocking interaction with the rest of the screen. They are an alternative to inline menus and simple dialogs, providing additional room for content, iconography, and actions.\u201d According to <a href=\"https://developer.android.com/reference/kotlin/androidx/compose/material/package-summary#ModalBottomSheetLayout(kotlin.Function1,androidx.compose.ui.Modifier,androidx.compose.material.ModalBottomSheetState,androidx.compose.ui.graphics.Shape,androidx.compose.ui.unit.Dp,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,kotlin.Function0)\">the official documentation</a>\n</blockquote>\n<p>We are gonna use ModalBottomSheetLayout which has its own state that we need to remember. So let\u2019s get on with\u00a0it.</p>\n<p>First, we are gonna create sheetState:</p>\n<a href=\"https://medium.com/media/9103c5800e598e5d002d66a482811093/href\">https://medium.com/media/9103c5800e598e5d002d66a482811093/href</a><p>There are three ModalBottomSheetValues:</p>\n<ul>\n<li>Hidden</li>\n<li>Expanded</li>\n<li>HalfExpanded</li>\n</ul>\n<p>The first two are describing enough. HalfExpanded will only show half of the bottom sheet, and this state is enabled only if the height of the bottom sheet is more than 50% of the screen\u00a0height.</p>\n<p>confirmStateChange is an optional callback invoked to confirm or veto a pending state change. With a value like that, we are blocking HalfExpanded bottom sheet\u00a0value.</p>\n<p>Don\u2019t forget to add @OptIn(ExperimentalMaterialApi::class) as this is all still experimental.</p>\n<p>Next, we can now implement ModalBottomSheetLayout and inside its content put the whole screen. Our screen will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href\">https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href</a><p>As we can see, we put our screen composables inside the ModalBottomSheetLayout\u2019s content. Also, we pass sheetState as an argument.<br>BackHandler is an effect for handling presses of the system back button. The first argument is when it is enabled, and the second is what it should do when the system back button is\u00a0pressed.</p>\n<p>In this case, we just want to hide the bottom sheet if it is shown and the system back button is\u00a0pressed.</p>\n<p>Button inside the Column is showing and hiding the bottom sheet. sheetState.show() will show the bottom sheet with animation and sheetState.hide() will hide the bottom sheet with animation.</p>\n<p>And the last thing that we need to see here is BottomSheet composable:</p>\n<a href=\"https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href\">https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href</a><p>Which is a really simple column filled with some text. You can put here whatever you\u00a0want.</p>\n<p>If you want to have some buttons that do something, you will just communicate via callbacks with the main composable.</p>\n<p>This is pretty simple logic but very useful to know. One note here, the logic for showing and hiding the bottom sheet is put in the UI, but it should be handled by the ViewModel. That is a little bit out of the scope of this article, as I just wanted to show how you can create a bottom\u00a0sheet.</p>\n<p>That would be all for this article. I hope you liked\u00a0it!</p>\n<p>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/bottomsheet\">GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d6472e8eaf2e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["jetpack-compose","android","programming","android-app-development","mobile-app-development"]},{"title":"Android Access Token Logic With Retrofit OkHttp Interceptors","pubDate":"2022-08-16 17:01:51","link":"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/740ea48547a0","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/600/1*t-FNY-1kndQOyAsU7OhHHg@2x.png","description":"\n<h4>Access token headers logic with OkHttp Interceptors</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*t-FNY-1kndQOyAsU7OhHHg@2x.png\"><figcaption>Image by Room, from <a href=\"https://square.github.io/okhttp/features/interceptors/\">OkHttp Interceptors documentation</a></figcaption></figure><p><a href=\"https://square.github.io/retrofit/\">Retrofit</a> is a powerful library for handling HTTP requests in Android\u00a0apps.</p>\n<blockquote>\u201cA type-safe HTTP client for Android and Java.\u201d According to the <a href=\"https://square.github.io/retrofit/\">Retrofit official documentation</a>\n</blockquote>\n<p>The retrofit wouldn\u2019t be that powerful without the <a href=\"https://square.github.io/okhttp/\">OkHttp library</a>. OkHttp is an HTTP client that helps you load resources faster and save bandwidth. It also allows you to intercept requests, monitor them, and rewrite\u00a0them.</p>\n<p>Today, I am gonna show you how we can use OkHttp Interceptors to reduce boilerplate code. Some parts of the requests are the same, so with interceptors, you can add them without really worrying about them. An example for this article will be adding and refreshing the Access\u00a0Token.</p>\n<h3>OAuth Introduction</h3>\n<p>OAuth is a means for the users to authenticate themself for some certain action. Most servers use this type of authentication, and the most common implementation is with tokens. You have two types of tokens that every user receives:</p>\n<ul>\n<li>Access Token (Used for authenticating when sending requests to the\u00a0server)</li>\n<li>Refresh Token (Used for refreshing the Access Token when it\u00a0expires)</li>\n</ul>\n<p>So, in every request, you need to provide Access Token to authenticate yourself and be allowed to call specific APIs. Access tokens last up to 30 minutes. It depends on implementation. Refresh token lasts up to 200 days, and it also depends on implementation.</p>\n<p>With interceptors, we don\u2019t need to manually add an access token to every request; an interceptor can do that for us. Also, when the access token expires, it can refresh it and then send the request again. In the example, we will see how to do\u00a0it.</p>\n<h3>OkHttp Interceptors</h3>\n<p>There are two types of interceptors:</p>\n<ul>\n<li>Application level interceptors (Added between the application code and OkHttp Core library, using a method addInterceptor())</li>\n<li>Network level interceptors (Added between the OkHttpCore library and the Server, using a method addNetworkInterceptor() )</li>\n</ul>\n<p>For the access token, including and refreshing, we are gonna use application-level interceptors. First, let\u2019s add some dependencies:</p>\n<pre>implementation \"com.squareup.retrofit2:retrofit:2.9.0\"<br>implementation \"com.squareup.okhttp3:okhttp:5.0.0-alpha.3\"</pre>\n<p><strong>Note: </strong>Check if there is a newer version of these dependencies.</p>\n<p>Now we are gonna create an interceptor by implementing Interceptor interface:</p>\n<a href=\"https://medium.com/media/80d8f38274792baf12a641c134b7f277/href\">https://medium.com/media/80d8f38274792baf12a641c134b7f277/href</a><p><strong>Note: </strong>In this example, I am using Dagger-Hilt, which is out of the scope of this article. I have chosen this because this is the most commonly used DI\u00a0library.</p>\n<p>Now we are gonna implement the intercept function like\u00a0this:</p>\n<a href=\"https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href\">https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href</a><p>With chain.request() we get the current request, and then we get the access token. We proceed with the request by adding an access token as a header and sending that\u00a0request.</p>\n<p>Now, if the response code has a value HTTP_UNAUTHORIZED or 401 that means that the access token is invalid, so we try to refresh the access token. But first, we check if some other thread got a new access token by comparing the current with the last saved in shared preferences. If they are the same, we refresh the token and proceed with the\u00a0request.</p>\n<p>Then when we want to add it to the OkHttpClient, which is after that added to the Retrofit, we do something like\u00a0this:</p>\n<pre>OkHttpClient.Builder()<br>    .addInterceptor(authInterceptor)<br>    .build()</pre>\n<p>This is very important and fairly simple logic. I hope you like it!<br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/interceptors\">GitHub\u00a0repo</a>.</p>\n<h3>Conclusion</h3>\n<p>There are a lot of use cases where you can use interceptors, not just for refreshing the access token. They are a handy mechanism. For example, you could use them for error handling, adding other headers apart from access tokens, gzipping your request, and so\u00a0on.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre>You can connect with me on:<br><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<h3><strong>Resources</strong></h3>\n<ul>\n<li><a href=\"https://square.github.io/retrofit/\">Retrofit</a></li>\n<li><a href=\"https://square.github.io/okhttp/\">Overview - OkHttp</a></li>\n<li><a href=\"https://square.github.io/okhttp/features/interceptors/#choosing-between-application-and-network-interceptors\">Interceptors - OkHttp</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=740ea48547a0\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Access token headers logic with OkHttp Interceptors</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*t-FNY-1kndQOyAsU7OhHHg@2x.png\"><figcaption>Image by Room, from <a href=\"https://square.github.io/okhttp/features/interceptors/\">OkHttp Interceptors documentation</a></figcaption></figure><p><a href=\"https://square.github.io/retrofit/\">Retrofit</a> is a powerful library for handling HTTP requests in Android\u00a0apps.</p>\n<blockquote>\u201cA type-safe HTTP client for Android and Java.\u201d According to the <a href=\"https://square.github.io/retrofit/\">Retrofit official documentation</a>\n</blockquote>\n<p>The retrofit wouldn\u2019t be that powerful without the <a href=\"https://square.github.io/okhttp/\">OkHttp library</a>. OkHttp is an HTTP client that helps you load resources faster and save bandwidth. It also allows you to intercept requests, monitor them, and rewrite\u00a0them.</p>\n<p>Today, I am gonna show you how we can use OkHttp Interceptors to reduce boilerplate code. Some parts of the requests are the same, so with interceptors, you can add them without really worrying about them. An example for this article will be adding and refreshing the Access\u00a0Token.</p>\n<h3>OAuth Introduction</h3>\n<p>OAuth is a means for the users to authenticate themself for some certain action. Most servers use this type of authentication, and the most common implementation is with tokens. You have two types of tokens that every user receives:</p>\n<ul>\n<li>Access Token (Used for authenticating when sending requests to the\u00a0server)</li>\n<li>Refresh Token (Used for refreshing the Access Token when it\u00a0expires)</li>\n</ul>\n<p>So, in every request, you need to provide Access Token to authenticate yourself and be allowed to call specific APIs. Access tokens last up to 30 minutes. It depends on implementation. Refresh token lasts up to 200 days, and it also depends on implementation.</p>\n<p>With interceptors, we don\u2019t need to manually add an access token to every request; an interceptor can do that for us. Also, when the access token expires, it can refresh it and then send the request again. In the example, we will see how to do\u00a0it.</p>\n<h3>OkHttp Interceptors</h3>\n<p>There are two types of interceptors:</p>\n<ul>\n<li>Application level interceptors (Added between the application code and OkHttp Core library, using a method addInterceptor())</li>\n<li>Network level interceptors (Added between the OkHttpCore library and the Server, using a method addNetworkInterceptor() )</li>\n</ul>\n<p>For the access token, including and refreshing, we are gonna use application-level interceptors. First, let\u2019s add some dependencies:</p>\n<pre>implementation \"com.squareup.retrofit2:retrofit:2.9.0\"<br>implementation \"com.squareup.okhttp3:okhttp:5.0.0-alpha.3\"</pre>\n<p><strong>Note: </strong>Check if there is a newer version of these dependencies.</p>\n<p>Now we are gonna create an interceptor by implementing Interceptor interface:</p>\n<a href=\"https://medium.com/media/80d8f38274792baf12a641c134b7f277/href\">https://medium.com/media/80d8f38274792baf12a641c134b7f277/href</a><p><strong>Note: </strong>In this example, I am using Dagger-Hilt, which is out of the scope of this article. I have chosen this because this is the most commonly used DI\u00a0library.</p>\n<p>Now we are gonna implement the intercept function like\u00a0this:</p>\n<a href=\"https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href\">https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href</a><p>With chain.request() we get the current request, and then we get the access token. We proceed with the request by adding an access token as a header and sending that\u00a0request.</p>\n<p>Now, if the response code has a value HTTP_UNAUTHORIZED or 401 that means that the access token is invalid, so we try to refresh the access token. But first, we check if some other thread got a new access token by comparing the current with the last saved in shared preferences. If they are the same, we refresh the token and proceed with the\u00a0request.</p>\n<p>Then when we want to add it to the OkHttpClient, which is after that added to the Retrofit, we do something like\u00a0this:</p>\n<pre>OkHttpClient.Builder()<br>    .addInterceptor(authInterceptor)<br>    .build()</pre>\n<p>This is very important and fairly simple logic. I hope you like it!<br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/interceptors\">GitHub\u00a0repo</a>.</p>\n<h3>Conclusion</h3>\n<p>There are a lot of use cases where you can use interceptors, not just for refreshing the access token. They are a handy mechanism. For example, you could use them for error handling, adding other headers apart from access tokens, gzipping your request, and so\u00a0on.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre>You can connect with me on:<br><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<h3><strong>Resources</strong></h3>\n<ul>\n<li><a href=\"https://square.github.io/retrofit/\">Retrofit</a></li>\n<li><a href=\"https://square.github.io/okhttp/\">Overview - OkHttp</a></li>\n<li><a href=\"https://square.github.io/okhttp/features/interceptors/#choosing-between-application-and-network-interceptors\">Interceptors - OkHttp</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=740ea48547a0\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["android","retrofit","okhttp","programming","software-development"]},{"title":"Android Studio File and Code Templates","pubDate":"2022-07-19 08:14:04","link":"https://blog.devgenius.io/android-studio-file-and-code-templates-45e429855f6b?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/45e429855f6b","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/730/1*XDM2_nJLBlj1dbsYnARtUA.png","description":"\n<h4>Boost your productivity by learning how to create and use file and code templates in Android\u00a0Studio.</h4>\n<p>In Android Studio we have a couple of Kotlin files that we can create, for\u00a0example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/730/1*XDM2_nJLBlj1dbsYnARtUA.png\"></figure><p>All of them are File Templates, which you can modify and create new ones. Let\u2019s head to the Android Studio settings to take a better look at them.\u00a0Steps:</p>\n<ul>\n<li>Mac: <br>Android Studio -&gt; Preferences -&gt; Editor -&gt; File and Code Templates</li>\n<li>Windows:<br>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates</li>\n</ul>\n<p>You should see something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U_jYo0vJLy1SDsSylIYJOA.png\"></figure><p>As you can see, there are a lot of templates for different languages: Kotlin, HTML, Java, C++, and so on. At the top of the screen, you can see a dropdown menu Scheme where you can select if you are seeing templates that are for all projects or templates only for this project. If you click on Kotlin File or Kotlin Class template, you will see how is class actually\u00a0created.</p>\n<p>Now let\u2019s add our own File Template. The template will be for creating the Jetpack Compose screen (you can create a template for whatever you want). Click on the + icon, enter the name of the template Jetpack Compose Screen\u00a0, and for extension enter kt as that is the extension of Kotlin files. The template should look something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*t6xZXxwt-FBF9t_s_tJa-A.png\"></figure><p>${NAME} is a name that we will enter when we select to create a file from this template, ${PACKAGE_NAME} is just a name of the package where we are creating the file. Now when you want to create a file you will have a Jetpack Compose Screen template.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O-AqxaA6C-5tQWPazy9Yzw.png\"></figure><p>You can also nest more file templates so that multiple files are created at once. For example here is the template for creating Screenand ViewModel:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*L-52mGc3PpUODcQjGCAj0Q.png\"></figure><p>Presentation layer is the name of the template and the first file is the same as the last one, just creating a Jetpack Compose Screen. With the button right next to the + button, you nest file templates. So we will add one more that will create ViewModel.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1fiydigNErmlDKJ2boE_ZQ.png\"></figure><p>This will create two files, if you give the name Test files will be named: TestScreen and TestViewModel. It is pretty useful to have template likes, instead of twice creating files and writing some code, you will do it just\u00a0once.</p>\n<p>There are plenty of possibilities with file templates you can create whatever you want, just don\u2019t forget to include imports so that everything is automatically imported. You can use your imagination and as a result, you will boost your productivity and shorten the development time by not creating the same things from zero over and over\u00a0again.</p>\n<p>You can check out this <a href=\"https://github.com/Giga99/MediumRepos\">GitHub repo</a> as it contains templates that I explained in this article, just don\u2019t forget to change Scheme to Project so that they are\u00a0loaded.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=45e429855f6b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devgenius.io/android-studio-file-and-code-templates-45e429855f6b\">Android Studio File and Code Templates</a> was originally published in <a href=\"https://blog.devgenius.io/\">Dev Genius</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Boost your productivity by learning how to create and use file and code templates in Android\u00a0Studio.</h4>\n<p>In Android Studio we have a couple of Kotlin files that we can create, for\u00a0example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/730/1*XDM2_nJLBlj1dbsYnARtUA.png\"></figure><p>All of them are File Templates, which you can modify and create new ones. Let\u2019s head to the Android Studio settings to take a better look at them.\u00a0Steps:</p>\n<ul>\n<li>Mac: <br>Android Studio -&gt; Preferences -&gt; Editor -&gt; File and Code Templates</li>\n<li>Windows:<br>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates</li>\n</ul>\n<p>You should see something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U_jYo0vJLy1SDsSylIYJOA.png\"></figure><p>As you can see, there are a lot of templates for different languages: Kotlin, HTML, Java, C++, and so on. At the top of the screen, you can see a dropdown menu Scheme where you can select if you are seeing templates that are for all projects or templates only for this project. If you click on Kotlin File or Kotlin Class template, you will see how is class actually\u00a0created.</p>\n<p>Now let\u2019s add our own File Template. The template will be for creating the Jetpack Compose screen (you can create a template for whatever you want). Click on the + icon, enter the name of the template Jetpack Compose Screen\u00a0, and for extension enter kt as that is the extension of Kotlin files. The template should look something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*t6xZXxwt-FBF9t_s_tJa-A.png\"></figure><p>${NAME} is a name that we will enter when we select to create a file from this template, ${PACKAGE_NAME} is just a name of the package where we are creating the file. Now when you want to create a file you will have a Jetpack Compose Screen template.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O-AqxaA6C-5tQWPazy9Yzw.png\"></figure><p>You can also nest more file templates so that multiple files are created at once. For example here is the template for creating Screenand ViewModel:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*L-52mGc3PpUODcQjGCAj0Q.png\"></figure><p>Presentation layer is the name of the template and the first file is the same as the last one, just creating a Jetpack Compose Screen. With the button right next to the + button, you nest file templates. So we will add one more that will create ViewModel.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1fiydigNErmlDKJ2boE_ZQ.png\"></figure><p>This will create two files, if you give the name Test files will be named: TestScreen and TestViewModel. It is pretty useful to have template likes, instead of twice creating files and writing some code, you will do it just\u00a0once.</p>\n<p>There are plenty of possibilities with file templates you can create whatever you want, just don\u2019t forget to include imports so that everything is automatically imported. You can use your imagination and as a result, you will boost your productivity and shorten the development time by not creating the same things from zero over and over\u00a0again.</p>\n<p>You can check out this <a href=\"https://github.com/Giga99/MediumRepos\">GitHub repo</a> as it contains templates that I explained in this article, just don\u2019t forget to change Scheme to Project so that they are\u00a0loaded.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=45e429855f6b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devgenius.io/android-studio-file-and-code-templates-45e429855f6b\">Android Studio File and Code Templates</a> was originally published in <a href=\"https://blog.devgenius.io/\">Dev Genius</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["kotlin","android","android-studio-setup","android-studio","productivity"]},{"title":"Implement Horizontal and Vertical ViewPager in Jetpack Compose","pubDate":"2022-07-14 01:29:04","link":"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/a7a91f2ac746","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*M3xO1dvWTpSC353E3y1uiw.png","description":"\n<h4>Implementing ViewPager in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*M3xO1dvWTpSC353E3y1uiw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>In Jetpack Compose we don\u2019t have anything by default like ViewPager that we could use, but we have a solution for that. We are going to use Accompanist Pager library. First, we are gonna add the dependency to the app-level build.gradle file:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<blockquote>\u201cA library which provides paging layouts for Jetpack Compose. If you\u2019ve used Android\u2019s <a href=\"https://developer.android.com/reference/kotlin/androidx/viewpager/widget/ViewPager\">ViewPager</a> before, it has similar properties.\u201d According to <a href=\"https://google.github.io/accompanist/pager/\">Pager official documentation</a>\n</blockquote>\n<h4>HorizontalPager</h4>\n<p>HorizontalPager is composable where content is ordered horizontally and displayed as pages. We are going to create a data class called HorizontalPagerContent which will represent horizontal pager\u00a0content.</p>\n<pre>data class HorizontalPagerContent(<br>    val title: String,<br>    val subtitle: String,<br>    val description: String<br>)</pre>\n<p>Next is to create a list of items that will be shown in this\u00a0pager:</p>\n<pre>fun createItems() = <em>listOf</em>(<br>    HorizontalPagerContent(title = \"Title1\", subtitle = \"Subtitle1\", description = \"Description1\"),<br>    HorizontalPagerContent(title = \"Title2\", subtitle = \"Subtitle2\", description = \"Description2\"),<br>    HorizontalPagerContent(title = \"Title3\", subtitle = \"Subtitle3\", description = \"Description3\"),<br>    HorizontalPagerContent(title = \"Title4\", subtitle = \"Subtitle4\", description = \"Description4\"),<br>    HorizontalPagerContent(title = \"Title5\", subtitle = \"Subtitle5\", description = \"Description5\")<br>)</pre>\n<p>It is a simple function that returns a list of HorizontalPagerContent items. HorizontalPager has two mandatory parameters and they arecount: Int and content: @Composable PagerScope.(page: Int) -&gt; Unit, every other param is optional and there are many like: modifier, reverseLayout, verticalAlignment, and so on. One optional parameter that I didn\u2019t mention and that can be very useful is state: PagerState which represents the state of the pager. That state you can use to get the current page, page count, and to scroll to the specific page which we will show in our example. So our main composable will look something like\u00a0this:</p>\n<a href=\"https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href\">https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because all of the APIs in the library are still experimental.</p>\n<p>First, we create items and pagerState and pass both of them to the HorizontalPager. The content composable returns index of the current page which we can use to get that item from the list and load its data. At the end of our main composable, we can see a button that will, when pressed, scroll to the third page. To scroll you can use animateScrollToPage or scrollToPage depends on what you need, but both of them need to be called inside Coroutine. The difference between them is that animateScrollToPage scrolls smoothly.</p>\n<p>The next thing that we are gonna add is indicators and tabs. For that we need to add a new accompanist library:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager-indicators:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>Adding indicators is very simple, we just need to add HorizontalPagerIndicator and pass pagerState. So it looks like this for\u00a0example:</p>\n<pre><em>HorizontalPagerIndicator</em>(<br>    pagerState = pagerState,<br>    modifier = Modifier<br>        .<em>align</em>(Alignment.CenterHorizontally)<br>        .<em>padding</em>(16.<em>dp</em>),<br>)</pre>\n<p>Not bad, right? Now let\u2019s add tabs, we are going to create a new composable called HorizontalTabs, and in that composable, we will use TabRow and Tab from Accompanist Pager Indicator library. This composable will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href\">https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href</a><p>TabRow has two mandatory parameters selectedTabIndex: Int and tabs: @Composable () -&gt; Unit. Parameter indicator is used here to animate indicator drawing inside tabs space, without that indicator would only jump from one tab to another. Inside tabs composable we just pass what will our tabs look like. We are using composable Tab from this library, which has mandatory parameters: selected: Boolean, onClick: () -&gt; Unit, and content: @Composable ColumnScope.() -&gt; Unit. When clicked on any of the tabs we are smoothly scrolling to\u00a0it.</p>\n<p>That was HorizontalPager and main features that are used around it. Now we are going to implement VerticalPager.</p>\n<h4>VerticalPager</h4>\n<p>VerticalPager is composable where content is ordered vertically and displayed as\u00a0pages.</p>\n<p>Implementing VerticalPager is basically the same thing as implementing HorizontalPager.</p>\n<p>You just need to use VerticalPager instead of HorizontalPager and for indicators you use VerticalPagerIndicator instead of HorizontalPagerIndicator. Everything else is the same. So it would look like\u00a0this:</p>\n<a href=\"https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href\">https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href</a><p>That would be all for this article, I hope you liked it! <br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/viewpager\">GitHub\u00a0repo</a>.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://google.github.io/accompanist/pager/\">Guide - Accompanist</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a7a91f2ac746\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Implementing ViewPager in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*M3xO1dvWTpSC353E3y1uiw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>In Jetpack Compose we don\u2019t have anything by default like ViewPager that we could use, but we have a solution for that. We are going to use Accompanist Pager library. First, we are gonna add the dependency to the app-level build.gradle file:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<blockquote>\u201cA library which provides paging layouts for Jetpack Compose. If you\u2019ve used Android\u2019s <a href=\"https://developer.android.com/reference/kotlin/androidx/viewpager/widget/ViewPager\">ViewPager</a> before, it has similar properties.\u201d According to <a href=\"https://google.github.io/accompanist/pager/\">Pager official documentation</a>\n</blockquote>\n<h4>HorizontalPager</h4>\n<p>HorizontalPager is composable where content is ordered horizontally and displayed as pages. We are going to create a data class called HorizontalPagerContent which will represent horizontal pager\u00a0content.</p>\n<pre>data class HorizontalPagerContent(<br>    val title: String,<br>    val subtitle: String,<br>    val description: String<br>)</pre>\n<p>Next is to create a list of items that will be shown in this\u00a0pager:</p>\n<pre>fun createItems() = <em>listOf</em>(<br>    HorizontalPagerContent(title = \"Title1\", subtitle = \"Subtitle1\", description = \"Description1\"),<br>    HorizontalPagerContent(title = \"Title2\", subtitle = \"Subtitle2\", description = \"Description2\"),<br>    HorizontalPagerContent(title = \"Title3\", subtitle = \"Subtitle3\", description = \"Description3\"),<br>    HorizontalPagerContent(title = \"Title4\", subtitle = \"Subtitle4\", description = \"Description4\"),<br>    HorizontalPagerContent(title = \"Title5\", subtitle = \"Subtitle5\", description = \"Description5\")<br>)</pre>\n<p>It is a simple function that returns a list of HorizontalPagerContent items. HorizontalPager has two mandatory parameters and they arecount: Int and content: @Composable PagerScope.(page: Int) -&gt; Unit, every other param is optional and there are many like: modifier, reverseLayout, verticalAlignment, and so on. One optional parameter that I didn\u2019t mention and that can be very useful is state: PagerState which represents the state of the pager. That state you can use to get the current page, page count, and to scroll to the specific page which we will show in our example. So our main composable will look something like\u00a0this:</p>\n<a href=\"https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href\">https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because all of the APIs in the library are still experimental.</p>\n<p>First, we create items and pagerState and pass both of them to the HorizontalPager. The content composable returns index of the current page which we can use to get that item from the list and load its data. At the end of our main composable, we can see a button that will, when pressed, scroll to the third page. To scroll you can use animateScrollToPage or scrollToPage depends on what you need, but both of them need to be called inside Coroutine. The difference between them is that animateScrollToPage scrolls smoothly.</p>\n<p>The next thing that we are gonna add is indicators and tabs. For that we need to add a new accompanist library:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager-indicators:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>Adding indicators is very simple, we just need to add HorizontalPagerIndicator and pass pagerState. So it looks like this for\u00a0example:</p>\n<pre><em>HorizontalPagerIndicator</em>(<br>    pagerState = pagerState,<br>    modifier = Modifier<br>        .<em>align</em>(Alignment.CenterHorizontally)<br>        .<em>padding</em>(16.<em>dp</em>),<br>)</pre>\n<p>Not bad, right? Now let\u2019s add tabs, we are going to create a new composable called HorizontalTabs, and in that composable, we will use TabRow and Tab from Accompanist Pager Indicator library. This composable will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href\">https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href</a><p>TabRow has two mandatory parameters selectedTabIndex: Int and tabs: @Composable () -&gt; Unit. Parameter indicator is used here to animate indicator drawing inside tabs space, without that indicator would only jump from one tab to another. Inside tabs composable we just pass what will our tabs look like. We are using composable Tab from this library, which has mandatory parameters: selected: Boolean, onClick: () -&gt; Unit, and content: @Composable ColumnScope.() -&gt; Unit. When clicked on any of the tabs we are smoothly scrolling to\u00a0it.</p>\n<p>That was HorizontalPager and main features that are used around it. Now we are going to implement VerticalPager.</p>\n<h4>VerticalPager</h4>\n<p>VerticalPager is composable where content is ordered vertically and displayed as\u00a0pages.</p>\n<p>Implementing VerticalPager is basically the same thing as implementing HorizontalPager.</p>\n<p>You just need to use VerticalPager instead of HorizontalPager and for indicators you use VerticalPagerIndicator instead of HorizontalPagerIndicator. Everything else is the same. So it would look like\u00a0this:</p>\n<a href=\"https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href\">https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href</a><p>That would be all for this article, I hope you liked it! <br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/viewpager\">GitHub\u00a0repo</a>.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://google.github.io/accompanist/pager/\">Guide - Accompanist</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a7a91f2ac746\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["kotlin","mobile-app-development","android","jetpack-compose","android-app-development"]},{"title":"2 Ways to Request Permissions in Jetpack Compose","pubDate":"2022-07-08 19:21:03","link":"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/fd81c4a702c","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*xd2yFtJFHn5D9YQaY6yBKQ.jpeg","description":"\n<h4>The best ways to request permissions in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xd2yFtJFHn5D9YQaY6yBKQ.jpeg\"><figcaption>Photo by <a href=\"https://unsplash.com/@pathum_danthanarayana\">Pathum Danthanarayana</a> on\u00a0<a href=\"https://unsplash.com/\">Unsplash</a></figcaption></figure><p>Our first permission that we are gonna request will be Camera permission. To use the camera on our device, we need to request permission for it because it belongs to the \u201cdangerous\u201d ones right. First, we need to add this permission into the manifest file like\u00a0this:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.CAMERA\u201d /&gt;</pre>\n<p>After that, we can go to our Composable in which we need to request this permission and create a launcher for activity results like\u00a0this:</p>\n<a href=\"https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href\">https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href</a><p>We create a launcher for activity results with which we are gonna launch an Android built-in dialog for permission requests. Activity returns a boolean which tells us If permission is granted or not. If it is granted we open the camera and if not we could show some info dialog or whatever you want. After that, we will add a button whose onClickcallback calls the checkAndRequestCameraPermission function. This function looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href\">https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href</a><p>First, we check if the permission is already granted, if it is we open the camera and if it is not we request it via the launcher. Finally our main composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href\">https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href</a><p>Now we are gonna request two permissions for location. We can request both of them at the same time and no need to request them one by one. Permissions are ACCESS_COARSE_LOCATION and ACCESS_FINE_LOCATION<em>.</em> As we all know, the first step is to add them to our beloved manifest\u00a0file:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_COARSE_LOCATION\u201d /&gt;<br>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_FINE_LOCATION\u201d /&gt;</pre>\n<p>Then we are gonna add a launcher for activity results and a button for requesting these permissions in the main Composable. Like\u00a0this:</p>\n<a href=\"https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href\">https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href</a><p>Now we have an array of permissions and a launcher activity that is requesting multiple permissions. This activity is gonna show us a built-in dialog that requests every permission that we need. It returns a map of String (permission name) as a key and Boolean (granted or not) as a value. Function checkAndRequesstLocationPermissions looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href\">https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href</a><p>It will check every permission if it is granted or not. If all of them are granted we can use location, and if not we are gonna request those that we\u00a0need.</p>\n<h3>Accompanist permissions library</h3>\n<p>That was cool right, now I am gonna show you something even better. That is <a href=\"https://github.com/google/accompanist/tree/main/permissions\">accompanist permissions library</a>, they always make our lives easier. We can use their permissionState and PermissionRequired composable to manipulate with the result of requests even better. First, we are gonna add the dependency in the app-level build.gradle file:</p>\n<pre>implementation \u201ccom.google.accompanist:accompanist-permissions:0.23.1\u201d</pre>\n<p><strong>Note: </strong>At the of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>We are gonna request the same Camera permission, so don\u2019t forget to delete an app from your phone or clear app storage. First, we need to create permissionState which will track the state of our permission:</p>\n<pre>val permissionState = rememberPermissionState(permission = Manifest.permission.CAMERA)</pre>\n<p>After that, we are gonna create CameraPermission composable and pass it the permission state as a parameter so it can handle permission. Inside this composable, we are using the accompanist\u2019s PermissionRequired composable which takes in four parameters: <br>- permissionState: the state of our permission that we previously created<br>- permissionNotGrantedContent: content that should be shown after the permission is denied<br>- permissionNotAvailableContent: content that should be shown if the permission is not available<br>- content: Composable callback that will be called after the permission is granted<br>CameraPermission composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href\">https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because PermissionState is still experimental.</p>\n<p>So basically in our main composable, it looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href\">https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href</a><p>In the button onClick callback we just launch permission request with our permissionState, simple enough. Now we are gonna request multiple permissions for location. It is done similarly with a few modifications. Again, we first create the state of permissions:</p>\n<a href=\"https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href\">https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href</a><p><strong>Note:</strong> type of permissionsState is now MultiplePermissionState, where previously it was PermissionState.</p>\n<p>Next is to create LocationPermissions composable which contains PermissionsRequired accompanist\u2019s composable. It is similar to PermissionRequired, the difference is only in the first parameter which accepts now MultiplePermissionState as the parameter.</p>\n<a href=\"https://medium.com/media/59ddda8800691a558e06d2e8983137df/href\">https://medium.com/media/59ddda8800691a558e06d2e8983137df/href</a><p>And that\u2019s it. In our main composable we just launch multiple permission requests:</p>\n<a href=\"https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href\">https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href</a><p>Cool! As you can see accompanist permissions library gives us more flexibility and makes our life easier. All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/permissions\">GitHub\u00a0repo</a>.</p>\n<p>That would be all for this article, I hope you liked\u00a0it!</p>\n<pre>Connect with me on:</pre>\n<pre><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd81c4a702c\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>The best ways to request permissions in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xd2yFtJFHn5D9YQaY6yBKQ.jpeg\"><figcaption>Photo by <a href=\"https://unsplash.com/@pathum_danthanarayana\">Pathum Danthanarayana</a> on\u00a0<a href=\"https://unsplash.com/\">Unsplash</a></figcaption></figure><p>Our first permission that we are gonna request will be Camera permission. To use the camera on our device, we need to request permission for it because it belongs to the \u201cdangerous\u201d ones right. First, we need to add this permission into the manifest file like\u00a0this:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.CAMERA\u201d /&gt;</pre>\n<p>After that, we can go to our Composable in which we need to request this permission and create a launcher for activity results like\u00a0this:</p>\n<a href=\"https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href\">https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href</a><p>We create a launcher for activity results with which we are gonna launch an Android built-in dialog for permission requests. Activity returns a boolean which tells us If permission is granted or not. If it is granted we open the camera and if not we could show some info dialog or whatever you want. After that, we will add a button whose onClickcallback calls the checkAndRequestCameraPermission function. This function looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href\">https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href</a><p>First, we check if the permission is already granted, if it is we open the camera and if it is not we request it via the launcher. Finally our main composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href\">https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href</a><p>Now we are gonna request two permissions for location. We can request both of them at the same time and no need to request them one by one. Permissions are ACCESS_COARSE_LOCATION and ACCESS_FINE_LOCATION<em>.</em> As we all know, the first step is to add them to our beloved manifest\u00a0file:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_COARSE_LOCATION\u201d /&gt;<br>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_FINE_LOCATION\u201d /&gt;</pre>\n<p>Then we are gonna add a launcher for activity results and a button for requesting these permissions in the main Composable. Like\u00a0this:</p>\n<a href=\"https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href\">https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href</a><p>Now we have an array of permissions and a launcher activity that is requesting multiple permissions. This activity is gonna show us a built-in dialog that requests every permission that we need. It returns a map of String (permission name) as a key and Boolean (granted or not) as a value. Function checkAndRequesstLocationPermissions looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href\">https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href</a><p>It will check every permission if it is granted or not. If all of them are granted we can use location, and if not we are gonna request those that we\u00a0need.</p>\n<h3>Accompanist permissions library</h3>\n<p>That was cool right, now I am gonna show you something even better. That is <a href=\"https://github.com/google/accompanist/tree/main/permissions\">accompanist permissions library</a>, they always make our lives easier. We can use their permissionState and PermissionRequired composable to manipulate with the result of requests even better. First, we are gonna add the dependency in the app-level build.gradle file:</p>\n<pre>implementation \u201ccom.google.accompanist:accompanist-permissions:0.23.1\u201d</pre>\n<p><strong>Note: </strong>At the of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>We are gonna request the same Camera permission, so don\u2019t forget to delete an app from your phone or clear app storage. First, we need to create permissionState which will track the state of our permission:</p>\n<pre>val permissionState = rememberPermissionState(permission = Manifest.permission.CAMERA)</pre>\n<p>After that, we are gonna create CameraPermission composable and pass it the permission state as a parameter so it can handle permission. Inside this composable, we are using the accompanist\u2019s PermissionRequired composable which takes in four parameters: <br>- permissionState: the state of our permission that we previously created<br>- permissionNotGrantedContent: content that should be shown after the permission is denied<br>- permissionNotAvailableContent: content that should be shown if the permission is not available<br>- content: Composable callback that will be called after the permission is granted<br>CameraPermission composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href\">https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because PermissionState is still experimental.</p>\n<p>So basically in our main composable, it looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href\">https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href</a><p>In the button onClick callback we just launch permission request with our permissionState, simple enough. Now we are gonna request multiple permissions for location. It is done similarly with a few modifications. Again, we first create the state of permissions:</p>\n<a href=\"https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href\">https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href</a><p><strong>Note:</strong> type of permissionsState is now MultiplePermissionState, where previously it was PermissionState.</p>\n<p>Next is to create LocationPermissions composable which contains PermissionsRequired accompanist\u2019s composable. It is similar to PermissionRequired, the difference is only in the first parameter which accepts now MultiplePermissionState as the parameter.</p>\n<a href=\"https://medium.com/media/59ddda8800691a558e06d2e8983137df/href\">https://medium.com/media/59ddda8800691a558e06d2e8983137df/href</a><p>And that\u2019s it. In our main composable we just launch multiple permission requests:</p>\n<a href=\"https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href\">https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href</a><p>Cool! As you can see accompanist permissions library gives us more flexibility and makes our life easier. All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/permissions\">GitHub\u00a0repo</a>.</p>\n<p>That would be all for this article, I hope you liked\u00a0it!</p>\n<pre>Connect with me on:</pre>\n<pre><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://www.linkedin.com/in/igor-stevanovic/\">LinkedIn</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd81c4a702c\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["android","jetpack-compose","android-app-development","compose","kotlin"]}]}