{"status":"ok","feed":{"url":"https://medium.com/feed/@igorstevanovic99","title":"Stories by Igor Stevanovic on Medium","link":"https://medium.com/@igorstevanovic99?source=rss-89681abbf4e8------2","author":"","description":"Stories by Igor Stevanovic on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*lNZsnZyt_49c2YFsOHO-yg.jpeg"},"items":[{"title":"Implement Bottom Sheet in Jetpack Compose","pubDate":"2022-08-24 17:17:57","link":"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/d6472e8eaf2e","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*tlbbPokxXmjPSa0u7sWWzw.png","description":"\n<h4>A short guide for developers</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tlbbPokxXmjPSa0u7sWWzw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Jetpack Compose brings us so many good things. Working on UI is just a pleasure compared to an XML. One of the things it brings us is the out-of-the-box way to implement bottom sheets. No need to include any dependency. Everything is already\u00a0there.</p>\n<blockquote>\u201cModal bottom sheets present a set of choices while blocking interaction with the rest of the screen. They are an alternative to inline menus and simple dialogs, providing additional room for content, iconography, and actions.\u201d According to <a href=\"https://developer.android.com/reference/kotlin/androidx/compose/material/package-summary#ModalBottomSheetLayout(kotlin.Function1,androidx.compose.ui.Modifier,androidx.compose.material.ModalBottomSheetState,androidx.compose.ui.graphics.Shape,androidx.compose.ui.unit.Dp,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,kotlin.Function0)\">the official documentation</a>\n</blockquote>\n<p>We are gonna use ModalBottomSheetLayout which has its own state that we need to remember. So let\u2019s get on with\u00a0it.</p>\n<p>First, we are gonna create sheetState:</p>\n<a href=\"https://medium.com/media/9103c5800e598e5d002d66a482811093/href\">https://medium.com/media/9103c5800e598e5d002d66a482811093/href</a><p>There are three ModalBottomSheetValues:</p>\n<ul>\n<li>Hidden</li>\n<li>Expanded</li>\n<li>HalfExpanded</li>\n</ul>\n<p>The first two are describing enough. HalfExpanded will only show half of the bottom sheet, and this state is enabled only if the height of the bottom sheet is more than 50% of the screen\u00a0height.</p>\n<p>confirmStateChange is an optional callback invoked to confirm or veto a pending state change. With a value like that, we are blocking HalfExpanded bottom sheet\u00a0value.</p>\n<p>Don\u2019t forget to add @OptIn(ExperimentalMaterialApi::class) as this is all still experimental.</p>\n<p>Next, we can now implement ModalBottomSheetLayout and inside its content put the whole screen. Our screen will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href\">https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href</a><p>As we can see, we put our screen composables inside the ModalBottomSheetLayout\u2019s content. Also, we pass sheetState as an argument.<br>BackHandler is an effect for handling presses of the system back button. The first argument is when it is enabled, and the second is what it should do when the system back button is\u00a0pressed.</p>\n<p>In this case, we just want to hide the bottom sheet if it is shown and the system back button is\u00a0pressed.</p>\n<p>Button inside the Column is showing and hiding the bottom sheet. sheetState.show() will show the bottom sheet with animation and sheetState.hide() will hide the bottom sheet with animation.</p>\n<p>And the last thing that we need to see here is BottomSheet composable:</p>\n<a href=\"https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href\">https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href</a><p>Which is a really simple column filled with some text. You can put here whatever you\u00a0want.</p>\n<p>If you want to have some buttons that do something, you will just communicate via callbacks with the main composable.</p>\n<p>This is pretty simple logic but very useful to know. One note here, the logic for showing and hiding the bottom sheet is put in the UI, but it should be handled by the ViewModel. That is a little bit out of the scope of this article, as I just wanted to show how you can create a bottom\u00a0sheet.</p>\n<p>That would be all for this article. I hope you liked\u00a0it!</p>\n<p>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/bottomsheet\">GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d6472e8eaf2e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>A short guide for developers</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tlbbPokxXmjPSa0u7sWWzw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>Jetpack Compose brings us so many good things. Working on UI is just a pleasure compared to an XML. One of the things it brings us is the out-of-the-box way to implement bottom sheets. No need to include any dependency. Everything is already\u00a0there.</p>\n<blockquote>\u201cModal bottom sheets present a set of choices while blocking interaction with the rest of the screen. They are an alternative to inline menus and simple dialogs, providing additional room for content, iconography, and actions.\u201d According to <a href=\"https://developer.android.com/reference/kotlin/androidx/compose/material/package-summary#ModalBottomSheetLayout(kotlin.Function1,androidx.compose.ui.Modifier,androidx.compose.material.ModalBottomSheetState,androidx.compose.ui.graphics.Shape,androidx.compose.ui.unit.Dp,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,kotlin.Function0)\">the official documentation</a>\n</blockquote>\n<p>We are gonna use ModalBottomSheetLayout which has its own state that we need to remember. So let\u2019s get on with\u00a0it.</p>\n<p>First, we are gonna create sheetState:</p>\n<a href=\"https://medium.com/media/9103c5800e598e5d002d66a482811093/href\">https://medium.com/media/9103c5800e598e5d002d66a482811093/href</a><p>There are three ModalBottomSheetValues:</p>\n<ul>\n<li>Hidden</li>\n<li>Expanded</li>\n<li>HalfExpanded</li>\n</ul>\n<p>The first two are describing enough. HalfExpanded will only show half of the bottom sheet, and this state is enabled only if the height of the bottom sheet is more than 50% of the screen\u00a0height.</p>\n<p>confirmStateChange is an optional callback invoked to confirm or veto a pending state change. With a value like that, we are blocking HalfExpanded bottom sheet\u00a0value.</p>\n<p>Don\u2019t forget to add @OptIn(ExperimentalMaterialApi::class) as this is all still experimental.</p>\n<p>Next, we can now implement ModalBottomSheetLayout and inside its content put the whole screen. Our screen will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href\">https://medium.com/media/1d3b2431781b51d131875f48e925f52d/href</a><p>As we can see, we put our screen composables inside the ModalBottomSheetLayout\u2019s content. Also, we pass sheetState as an argument.<br>BackHandler is an effect for handling presses of the system back button. The first argument is when it is enabled, and the second is what it should do when the system back button is\u00a0pressed.</p>\n<p>In this case, we just want to hide the bottom sheet if it is shown and the system back button is\u00a0pressed.</p>\n<p>Button inside the Column is showing and hiding the bottom sheet. sheetState.show() will show the bottom sheet with animation and sheetState.hide() will hide the bottom sheet with animation.</p>\n<p>And the last thing that we need to see here is BottomSheet composable:</p>\n<a href=\"https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href\">https://medium.com/media/e87cb3bcc7e16f0bda7ebb4eb1d5609a/href</a><p>Which is a really simple column filled with some text. You can put here whatever you\u00a0want.</p>\n<p>If you want to have some buttons that do something, you will just communicate via callbacks with the main composable.</p>\n<p>This is pretty simple logic but very useful to know. One note here, the logic for showing and hiding the bottom sheet is put in the UI, but it should be handled by the ViewModel. That is a little bit out of the scope of this article, as I just wanted to show how you can create a bottom\u00a0sheet.</p>\n<p>That would be all for this article. I hope you liked\u00a0it!</p>\n<p>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/bottomsheet\">GitHub\u00a0repo</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d6472e8eaf2e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-bottom-sheet-in-jetpack-compose-d6472e8eaf2e\">Implement Bottom Sheet in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["jetpack-compose","android","programming","android-app-development","mobile-app-development"]},{"title":"Android Access Token Logic With Retrofit OkHttp Interceptors","pubDate":"2022-08-16 17:01:51","link":"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/740ea48547a0","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/600/1*t-FNY-1kndQOyAsU7OhHHg@2x.png","description":"\n<h4>Access token headers logic with OkHttp Interceptors</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*t-FNY-1kndQOyAsU7OhHHg@2x.png\"><figcaption>Image by Room, from <a href=\"https://square.github.io/okhttp/features/interceptors/\">OkHttp Interceptors documentation</a></figcaption></figure><p><a href=\"https://square.github.io/retrofit/\">Retrofit</a> is a powerful library for handling HTTP requests in Android\u00a0apps.</p>\n<blockquote>\u201cA type-safe HTTP client for Android and Java.\u201d According to the <a href=\"https://square.github.io/retrofit/\">Retrofit official documentation</a>\n</blockquote>\n<p>The retrofit wouldn\u2019t be that powerful without the <a href=\"https://square.github.io/okhttp/\">OkHttp library</a>. OkHttp is an HTTP client that helps you load resources faster and save bandwidth. It also allows you to intercept requests, monitor them, and rewrite\u00a0them.</p>\n<p>Today, I am gonna show you how we can use OkHttp Interceptors to reduce boilerplate code. Some parts of the requests are the same, so with interceptors, you can add them without really worrying about them. An example for this article will be adding and refreshing the Access\u00a0Token.</p>\n<h3>OAuth Introduction</h3>\n<p>OAuth is a means for the users to authenticate themself for some certain action. Most servers use this type of authentication, and the most common implementation is with tokens. You have two types of tokens that every user receives:</p>\n<ul>\n<li>Access Token (Used for authenticating when sending requests to the\u00a0server)</li>\n<li>Refresh Token (Used for refreshing the Access Token when it\u00a0expires)</li>\n</ul>\n<p>So, in every request, you need to provide Access Token to authenticate yourself and be allowed to call specific APIs. Access tokens last up to 30 minutes. It depends on implementation. Refresh token lasts up to 200 days, and it also depends on implementation.</p>\n<p>With interceptors, we don\u2019t need to manually add an access token to every request; an interceptor can do that for us. Also, when the access token expires, it can refresh it and then send the request again. In the example, we will see how to do\u00a0it.</p>\n<h3>OkHttp Interceptors</h3>\n<p>There are two types of interceptors:</p>\n<ul>\n<li>Application level interceptors (Added between the application code and OkHttp Core library, using a method addInterceptor())</li>\n<li>Network level interceptors (Added between the OkHttpCore library and the Server, using a method addNetworkInterceptor() )</li>\n</ul>\n<p>For the access token, including and refreshing, we are gonna use application-level interceptors. First, let\u2019s add some dependencies:</p>\n<pre>implementation \"com.squareup.retrofit2:retrofit:2.9.0\"<br>implementation \"com.squareup.okhttp3:okhttp:5.0.0-alpha.3\"</pre>\n<p><strong>Note: </strong>Check if there is a newer version of these dependencies.</p>\n<p>Now we are gonna create an interceptor by implementing Interceptor interface:</p>\n<a href=\"https://medium.com/media/80d8f38274792baf12a641c134b7f277/href\">https://medium.com/media/80d8f38274792baf12a641c134b7f277/href</a><p><strong>Note: </strong>In this example, I am using Dagger-Hilt, which is out of the scope of this article. I have chosen this because this is the most commonly used DI\u00a0library.</p>\n<p>Now we are gonna implement the intercept function like\u00a0this:</p>\n<a href=\"https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href\">https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href</a><p>With chain.request() we get the current request, and then we get the access token. If it is null or blank, we try to refresh it. If it is still null or blank, we log out the\u00a0user.</p>\n<p>If it is not, we proceed with the request by adding an access token as a header and sending that\u00a0request.</p>\n<p>Now, if the response code has a value HTTP_UNAUTHORIZED that is 401 that means the access token is invalid, so we try to refresh it again. But first, we check if some other thread got a new access token by comparing the current with the last saved in shared preferences. If they are the same, we refresh the token and proceed with the\u00a0request.</p>\n<p>Then when we want to add it to the OkHttpClient, which is after that added to the Retrofit, we do something like\u00a0this:</p>\n<pre>OkHttpClient.Builder()<br>    .addInterceptor(authInterceptor)<br>    .build()</pre>\n<p>This is very important and fairly simple logic. I hope you like it!<br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/interceptors\">GitHub\u00a0repo</a>.</p>\n<h3>Conclusion</h3>\n<p>There are a lot of use cases where you can use interceptors, not just for refreshing the access token. They are a handy mechanism. For example, you could use them for error handling, adding other headers apart from access tokens, gzipping your request, and so\u00a0on.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre>You can connect with me on:<br><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<h3><strong>Resources</strong></h3>\n<ul>\n<li><a href=\"https://square.github.io/retrofit/\">Retrofit</a></li>\n<li><a href=\"https://square.github.io/okhttp/\">Overview - OkHttp</a></li>\n<li><a href=\"https://square.github.io/okhttp/features/interceptors/#choosing-between-application-and-network-interceptors\">Interceptors - OkHttp</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=740ea48547a0\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Access token headers logic with OkHttp Interceptors</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*t-FNY-1kndQOyAsU7OhHHg@2x.png\"><figcaption>Image by Room, from <a href=\"https://square.github.io/okhttp/features/interceptors/\">OkHttp Interceptors documentation</a></figcaption></figure><p><a href=\"https://square.github.io/retrofit/\">Retrofit</a> is a powerful library for handling HTTP requests in Android\u00a0apps.</p>\n<blockquote>\u201cA type-safe HTTP client for Android and Java.\u201d According to the <a href=\"https://square.github.io/retrofit/\">Retrofit official documentation</a>\n</blockquote>\n<p>The retrofit wouldn\u2019t be that powerful without the <a href=\"https://square.github.io/okhttp/\">OkHttp library</a>. OkHttp is an HTTP client that helps you load resources faster and save bandwidth. It also allows you to intercept requests, monitor them, and rewrite\u00a0them.</p>\n<p>Today, I am gonna show you how we can use OkHttp Interceptors to reduce boilerplate code. Some parts of the requests are the same, so with interceptors, you can add them without really worrying about them. An example for this article will be adding and refreshing the Access\u00a0Token.</p>\n<h3>OAuth Introduction</h3>\n<p>OAuth is a means for the users to authenticate themself for some certain action. Most servers use this type of authentication, and the most common implementation is with tokens. You have two types of tokens that every user receives:</p>\n<ul>\n<li>Access Token (Used for authenticating when sending requests to the\u00a0server)</li>\n<li>Refresh Token (Used for refreshing the Access Token when it\u00a0expires)</li>\n</ul>\n<p>So, in every request, you need to provide Access Token to authenticate yourself and be allowed to call specific APIs. Access tokens last up to 30 minutes. It depends on implementation. Refresh token lasts up to 200 days, and it also depends on implementation.</p>\n<p>With interceptors, we don\u2019t need to manually add an access token to every request; an interceptor can do that for us. Also, when the access token expires, it can refresh it and then send the request again. In the example, we will see how to do\u00a0it.</p>\n<h3>OkHttp Interceptors</h3>\n<p>There are two types of interceptors:</p>\n<ul>\n<li>Application level interceptors (Added between the application code and OkHttp Core library, using a method addInterceptor())</li>\n<li>Network level interceptors (Added between the OkHttpCore library and the Server, using a method addNetworkInterceptor() )</li>\n</ul>\n<p>For the access token, including and refreshing, we are gonna use application-level interceptors. First, let\u2019s add some dependencies:</p>\n<pre>implementation \"com.squareup.retrofit2:retrofit:2.9.0\"<br>implementation \"com.squareup.okhttp3:okhttp:5.0.0-alpha.3\"</pre>\n<p><strong>Note: </strong>Check if there is a newer version of these dependencies.</p>\n<p>Now we are gonna create an interceptor by implementing Interceptor interface:</p>\n<a href=\"https://medium.com/media/80d8f38274792baf12a641c134b7f277/href\">https://medium.com/media/80d8f38274792baf12a641c134b7f277/href</a><p><strong>Note: </strong>In this example, I am using Dagger-Hilt, which is out of the scope of this article. I have chosen this because this is the most commonly used DI\u00a0library.</p>\n<p>Now we are gonna implement the intercept function like\u00a0this:</p>\n<a href=\"https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href\">https://medium.com/media/f80fb926ad08a4e27e6fff9e5bc01498/href</a><p>With chain.request() we get the current request, and then we get the access token. If it is null or blank, we try to refresh it. If it is still null or blank, we log out the\u00a0user.</p>\n<p>If it is not, we proceed with the request by adding an access token as a header and sending that\u00a0request.</p>\n<p>Now, if the response code has a value HTTP_UNAUTHORIZED that is 401 that means the access token is invalid, so we try to refresh it again. But first, we check if some other thread got a new access token by comparing the current with the last saved in shared preferences. If they are the same, we refresh the token and proceed with the\u00a0request.</p>\n<p>Then when we want to add it to the OkHttpClient, which is after that added to the Retrofit, we do something like\u00a0this:</p>\n<pre>OkHttpClient.Builder()<br>    .addInterceptor(authInterceptor)<br>    .build()</pre>\n<p>This is very important and fairly simple logic. I hope you like it!<br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/interceptors\">GitHub\u00a0repo</a>.</p>\n<h3>Conclusion</h3>\n<p>There are a lot of use cases where you can use interceptors, not just for refreshing the access token. They are a handy mechanism. For example, you could use them for error handling, adding other headers apart from access tokens, gzipping your request, and so\u00a0on.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre>You can connect with me on:<br><a href=\"https://github.com/Giga99\">GitHub</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn more about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<h3><strong>Resources</strong></h3>\n<ul>\n<li><a href=\"https://square.github.io/retrofit/\">Retrofit</a></li>\n<li><a href=\"https://square.github.io/okhttp/\">Overview - OkHttp</a></li>\n<li><a href=\"https://square.github.io/okhttp/features/interceptors/#choosing-between-application-and-network-interceptors\">Interceptors - OkHttp</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=740ea48547a0\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/android-access-token-logic-with-retrofit-okhttp-interceptors-740ea48547a0\">Android Access Token Logic With Retrofit OkHttp Interceptors</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["android","retrofit","okhttp","programming","software-development"]},{"title":"Android Studio File and Code Templates","pubDate":"2022-07-19 08:14:04","link":"https://blog.devgenius.io/android-studio-file-and-code-templates-45e429855f6b?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/45e429855f6b","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/730/1*XDM2_nJLBlj1dbsYnARtUA.png","description":"\n<h4>Boost your productivity by learning how to create and use file and code templates in Android\u00a0Studio.</h4>\n<p>In Android Studio we have a couple of Kotlin files that we can create, for\u00a0example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/730/1*XDM2_nJLBlj1dbsYnARtUA.png\"></figure><p>All of them are File Templates, which you can modify and create new ones. Let\u2019s head to the Android Studio settings to take a better look at them.\u00a0Steps:</p>\n<ul>\n<li>Mac: <br>Android Studio -&gt; Preferences -&gt; Editor -&gt; File and Code Templates</li>\n<li>Windows:<br>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates</li>\n</ul>\n<p>You should see something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U_jYo0vJLy1SDsSylIYJOA.png\"></figure><p>As you can see, there are a lot of templates for different languages: Kotlin, HTML, Java, C++, and so on. At the top of the screen, you can see a dropdown menu Scheme where you can select if you are seeing templates that are for all projects or templates only for this project. If you click on Kotlin File or Kotlin Class template, you will see how is class actually\u00a0created.</p>\n<p>Now let\u2019s add our own File Template. The template will be for creating the Jetpack Compose screen (you can create a template for whatever you want). Click on the + icon, enter the name of the template Jetpack Compose Screen\u00a0, and for extension enter kt as that is the extension of Kotlin files. The template should look something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*t6xZXxwt-FBF9t_s_tJa-A.png\"></figure><p>${NAME} is a name that we will enter when we select to create a file from this template, ${PACKAGE_NAME} is just a name of the package where we are creating the file. Now when you want to create a file you will have a Jetpack Compose Screen template.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O-AqxaA6C-5tQWPazy9Yzw.png\"></figure><p>You can also nest more file templates so that multiple files are created at once. For example here is the template for creating Screenand ViewModel:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*L-52mGc3PpUODcQjGCAj0Q.png\"></figure><p>Presentation layer is the name of the template and the first file is the same as the last one, just creating a Jetpack Compose Screen. With the button right next to the + button, you nest file templates. So we will add one more that will create ViewModel.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1fiydigNErmlDKJ2boE_ZQ.png\"></figure><p>This will create two files, if you give the name Test files will be named: TestScreen and TestViewModel. It is pretty useful to have template likes, instead of twice creating files and writing some code, you will do it just\u00a0once.</p>\n<p>There are plenty of possibilities with file templates you can create whatever you want, just don\u2019t forget to include imports so that everything is automatically imported. You can use your imagination and as a result, you will boost your productivity and shorten the development time by not creating the same things from zero over and over\u00a0again.</p>\n<p>You can check out this <a href=\"https://github.com/Giga99/MediumRepos\">Github repo</a> as it contains templates that I explained in this article, just don\u2019t forget to change Scheme to Project so that they are\u00a0loaded.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=45e429855f6b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devgenius.io/android-studio-file-and-code-templates-45e429855f6b\">Android Studio File and Code Templates</a> was originally published in <a href=\"https://blog.devgenius.io/\">Dev Genius</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Boost your productivity by learning how to create and use file and code templates in Android\u00a0Studio.</h4>\n<p>In Android Studio we have a couple of Kotlin files that we can create, for\u00a0example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/730/1*XDM2_nJLBlj1dbsYnARtUA.png\"></figure><p>All of them are File Templates, which you can modify and create new ones. Let\u2019s head to the Android Studio settings to take a better look at them.\u00a0Steps:</p>\n<ul>\n<li>Mac: <br>Android Studio -&gt; Preferences -&gt; Editor -&gt; File and Code Templates</li>\n<li>Windows:<br>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates</li>\n</ul>\n<p>You should see something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U_jYo0vJLy1SDsSylIYJOA.png\"></figure><p>As you can see, there are a lot of templates for different languages: Kotlin, HTML, Java, C++, and so on. At the top of the screen, you can see a dropdown menu Scheme where you can select if you are seeing templates that are for all projects or templates only for this project. If you click on Kotlin File or Kotlin Class template, you will see how is class actually\u00a0created.</p>\n<p>Now let\u2019s add our own File Template. The template will be for creating the Jetpack Compose screen (you can create a template for whatever you want). Click on the + icon, enter the name of the template Jetpack Compose Screen\u00a0, and for extension enter kt as that is the extension of Kotlin files. The template should look something like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*t6xZXxwt-FBF9t_s_tJa-A.png\"></figure><p>${NAME} is a name that we will enter when we select to create a file from this template, ${PACKAGE_NAME} is just a name of the package where we are creating the file. Now when you want to create a file you will have a Jetpack Compose Screen template.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O-AqxaA6C-5tQWPazy9Yzw.png\"></figure><p>You can also nest more file templates so that multiple files are created at once. For example here is the template for creating Screenand ViewModel:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*L-52mGc3PpUODcQjGCAj0Q.png\"></figure><p>Presentation layer is the name of the template and the first file is the same as the last one, just creating a Jetpack Compose Screen. With the button right next to the + button, you nest file templates. So we will add one more that will create ViewModel.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1fiydigNErmlDKJ2boE_ZQ.png\"></figure><p>This will create two files, if you give the name Test files will be named: TestScreen and TestViewModel. It is pretty useful to have template likes, instead of twice creating files and writing some code, you will do it just\u00a0once.</p>\n<p>There are plenty of possibilities with file templates you can create whatever you want, just don\u2019t forget to include imports so that everything is automatically imported. You can use your imagination and as a result, you will boost your productivity and shorten the development time by not creating the same things from zero over and over\u00a0again.</p>\n<p>You can check out this <a href=\"https://github.com/Giga99/MediumRepos\">Github repo</a> as it contains templates that I explained in this article, just don\u2019t forget to change Scheme to Project so that they are\u00a0loaded.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about Jetpack Compose, take a look at these articles:</p>\n<ul>\n<li><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a></li>\n<li><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=45e429855f6b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devgenius.io/android-studio-file-and-code-templates-45e429855f6b\">Android Studio File and Code Templates</a> was originally published in <a href=\"https://blog.devgenius.io/\">Dev Genius</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["kotlin","android","android-studio-setup","android-studio","productivity"]},{"title":"Implement Horizontal and Vertical ViewPager in Jetpack Compose","pubDate":"2022-07-14 01:29:04","link":"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/a7a91f2ac746","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*M3xO1dvWTpSC353E3y1uiw.png","description":"\n<h4>Implementing ViewPager in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*M3xO1dvWTpSC353E3y1uiw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>In Jetpack Compose we don\u2019t have anything by default like ViewPager that we could use, but we have a solution for that. We are going to use Accompanist Pager library. First, we are gonna add the dependency to the app-level build.gradle file:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<blockquote>\u201cA library which provides paging layouts for Jetpack Compose. If you\u2019ve used Android\u2019s <a href=\"https://developer.android.com/reference/kotlin/androidx/viewpager/widget/ViewPager\">ViewPager</a> before, it has similar properties.\u201d According to <a href=\"https://google.github.io/accompanist/pager/\">Pager official documentation</a>\n</blockquote>\n<h4>HorizontalPager</h4>\n<p>HorizontalPager is composable where content is ordered horizontally and displayed as pages. We are going to create a data class called HorizontalPagerContent which will represent horizontal pager\u00a0content.</p>\n<pre>data class HorizontalPagerContent(<br>    val title: String,<br>    val subtitle: String,<br>    val description: String<br>)</pre>\n<p>Next is to create a list of items that will be shown in this\u00a0pager:</p>\n<pre>fun createItems() = <em>listOf</em>(<br>    HorizontalPagerContent(title = \"Title1\", subtitle = \"Subtitle1\", description = \"Description1\"),<br>    HorizontalPagerContent(title = \"Title2\", subtitle = \"Subtitle2\", description = \"Description2\"),<br>    HorizontalPagerContent(title = \"Title3\", subtitle = \"Subtitle3\", description = \"Description3\"),<br>    HorizontalPagerContent(title = \"Title4\", subtitle = \"Subtitle4\", description = \"Description4\"),<br>    HorizontalPagerContent(title = \"Title5\", subtitle = \"Subtitle5\", description = \"Description5\")<br>)</pre>\n<p>It is a simple function that returns a list of HorizontalPagerContent items. HorizontalPager has two mandatory parameters and they arecount: Int and content: @Composable PagerScope.(page: Int) -&gt; Unit, every other param is optional and there are many like: modifier, reverseLayout, verticalAlignment, and so on. One optional parameter that I didn\u2019t mention and that can be very useful is state: PagerState which represents the state of the pager. That state you can use to get the current page, page count, and to scroll to the specific page which we will show in our example. So our main composable will look something like\u00a0this:</p>\n<a href=\"https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href\">https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because all of the APIs in the library are still experimental.</p>\n<p>First, we create items and pagerState and pass both of them to the HorizontalPager. The content composable returns index of the current page which we can use to get that item from the list and load its data. At the end of our main composable, we can see a button that will, when pressed, scroll to the third page. To scroll you can use animateScrollToPage or scrollToPage depends on what you need, but both of them need to be called inside Coroutine. The difference between them is that animateScrollToPage scrolls smoothly.</p>\n<p>The next thing that we are gonna add is indicators and tabs. For that we need to add a new accompanist library:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager-indicators:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>Adding indicators is very simple, we just need to add HorizontalPagerIndicator and pass pagerState. So it looks like this for\u00a0example:</p>\n<pre><em>HorizontalPagerIndicator</em>(<br>    pagerState = pagerState,<br>    modifier = Modifier<br>        .<em>align</em>(Alignment.CenterHorizontally)<br>        .<em>padding</em>(16.<em>dp</em>),<br>)</pre>\n<p>Not bad, right? Now let\u2019s add tabs, we are going to create a new composable called HorizontalTabs, and in that composable, we will use TabRow and Tab from Accompanist Pager Indicator library. This composable will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href\">https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href</a><p>TabRow has two mandatory parameters selectedTabIndex: Int and tabs: @Composable () -&gt; Unit. Parameter indicator is used here to animate indicator drawing inside tabs space, without that indicator would only jump from one tab to another. Inside tabs composable we just pass what will our tabs look like. We are using composable Tab from this library, which has mandatory parameters: selected: Boolean, onClick: () -&gt; Unit, and content: @Composable ColumnScope.() -&gt; Unit. When clicked on any of the tabs we are smoothly scrolling to\u00a0it.</p>\n<p>That was HorizontalPager and main features that are used around it. Now we are going to implement VerticalPager.</p>\n<h4>VerticalPager</h4>\n<p>VerticalPager is composable where content is ordered vertically and displayed as\u00a0pages.</p>\n<p>Implementing VerticalPager is basically the same thing as implementing HorizontalPager.</p>\n<p>You just need to use VerticalPager instead of HorizontalPager and for indicators you use VerticalPagerIndicator instead of HorizontalPagerIndicator. Everything else is the same. So it would look like\u00a0this:</p>\n<a href=\"https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href\">https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href</a><p>That would be all for this article, I hope you liked it! <br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/viewpager\">Github\u00a0repo</a>.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://google.github.io/accompanist/pager/\">Guide - Accompanist</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a7a91f2ac746\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Implementing ViewPager in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*M3xO1dvWTpSC353E3y1uiw.png\"><figcaption>The Jetpack Compose logo used in this image is the <a href=\"https://android-developers.googleblog.com/2020/08/announcing-jetpack-compose-alpha.html\">official logo</a> created by\u00a0Google</figcaption></figure><p>In Jetpack Compose we don\u2019t have anything by default like ViewPager that we could use, but we have a solution for that. We are going to use Accompanist Pager library. First, we are gonna add the dependency to the app-level build.gradle file:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<blockquote>\u201cA library which provides paging layouts for Jetpack Compose. If you\u2019ve used Android\u2019s <a href=\"https://developer.android.com/reference/kotlin/androidx/viewpager/widget/ViewPager\">ViewPager</a> before, it has similar properties.\u201d According to <a href=\"https://google.github.io/accompanist/pager/\">Pager official documentation</a>\n</blockquote>\n<h4>HorizontalPager</h4>\n<p>HorizontalPager is composable where content is ordered horizontally and displayed as pages. We are going to create a data class called HorizontalPagerContent which will represent horizontal pager\u00a0content.</p>\n<pre>data class HorizontalPagerContent(<br>    val title: String,<br>    val subtitle: String,<br>    val description: String<br>)</pre>\n<p>Next is to create a list of items that will be shown in this\u00a0pager:</p>\n<pre>fun createItems() = <em>listOf</em>(<br>    HorizontalPagerContent(title = \"Title1\", subtitle = \"Subtitle1\", description = \"Description1\"),<br>    HorizontalPagerContent(title = \"Title2\", subtitle = \"Subtitle2\", description = \"Description2\"),<br>    HorizontalPagerContent(title = \"Title3\", subtitle = \"Subtitle3\", description = \"Description3\"),<br>    HorizontalPagerContent(title = \"Title4\", subtitle = \"Subtitle4\", description = \"Description4\"),<br>    HorizontalPagerContent(title = \"Title5\", subtitle = \"Subtitle5\", description = \"Description5\")<br>)</pre>\n<p>It is a simple function that returns a list of HorizontalPagerContent items. HorizontalPager has two mandatory parameters and they arecount: Int and content: @Composable PagerScope.(page: Int) -&gt; Unit, every other param is optional and there are many like: modifier, reverseLayout, verticalAlignment, and so on. One optional parameter that I didn\u2019t mention and that can be very useful is state: PagerState which represents the state of the pager. That state you can use to get the current page, page count, and to scroll to the specific page which we will show in our example. So our main composable will look something like\u00a0this:</p>\n<a href=\"https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href\">https://medium.com/media/46adc6ac30fd5c993a3823f6b14f2623/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because all of the APIs in the library are still experimental.</p>\n<p>First, we create items and pagerState and pass both of them to the HorizontalPager. The content composable returns index of the current page which we can use to get that item from the list and load its data. At the end of our main composable, we can see a button that will, when pressed, scroll to the third page. To scroll you can use animateScrollToPage or scrollToPage depends on what you need, but both of them need to be called inside Coroutine. The difference between them is that animateScrollToPage scrolls smoothly.</p>\n<p>The next thing that we are gonna add is indicators and tabs. For that we need to add a new accompanist library:</p>\n<pre>implementation \"com.google.accompanist:accompanist-pager-indicators:0.23.1\"</pre>\n<p><strong>Note: </strong>At the time of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>Adding indicators is very simple, we just need to add HorizontalPagerIndicator and pass pagerState. So it looks like this for\u00a0example:</p>\n<pre><em>HorizontalPagerIndicator</em>(<br>    pagerState = pagerState,<br>    modifier = Modifier<br>        .<em>align</em>(Alignment.CenterHorizontally)<br>        .<em>padding</em>(16.<em>dp</em>),<br>)</pre>\n<p>Not bad, right? Now let\u2019s add tabs, we are going to create a new composable called HorizontalTabs, and in that composable, we will use TabRow and Tab from Accompanist Pager Indicator library. This composable will look like\u00a0this:</p>\n<a href=\"https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href\">https://medium.com/media/db7879dbd6c54b83ee8682d716371a06/href</a><p>TabRow has two mandatory parameters selectedTabIndex: Int and tabs: @Composable () -&gt; Unit. Parameter indicator is used here to animate indicator drawing inside tabs space, without that indicator would only jump from one tab to another. Inside tabs composable we just pass what will our tabs look like. We are using composable Tab from this library, which has mandatory parameters: selected: Boolean, onClick: () -&gt; Unit, and content: @Composable ColumnScope.() -&gt; Unit. When clicked on any of the tabs we are smoothly scrolling to\u00a0it.</p>\n<p>That was HorizontalPager and main features that are used around it. Now we are going to implement VerticalPager.</p>\n<h4>VerticalPager</h4>\n<p>VerticalPager is composable where content is ordered vertically and displayed as\u00a0pages.</p>\n<p>Implementing VerticalPager is basically the same thing as implementing HorizontalPager.</p>\n<p>You just need to use VerticalPager instead of HorizontalPager and for indicators you use VerticalPagerIndicator instead of HorizontalPagerIndicator. Everything else is the same. So it would look like\u00a0this:</p>\n<a href=\"https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href\">https://medium.com/media/fe2a8055efa4e09fbac30f8d311d42a6/href</a><p>That would be all for this article, I hope you liked it! <br>All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/viewpager\">Github\u00a0repo</a>.</p>\n<pre>Connect with me on:<br><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a><br><a href=\"https://giga99.github.io/portfolio-website/\">Portfolio website</a></pre>\n<p>If you want to learn about requesting permissions in Jetpack Compose, take a look at this\u00a0article:</p>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a></p>\n<h3>Resources</h3>\n<p><a href=\"https://google.github.io/accompanist/pager/\">Guide - Accompanist</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a7a91f2ac746\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/implement-horizontal-and-vertical-viewpager-in-jetpack-compose-a7a91f2ac746\">Implement Horizontal and Vertical ViewPager in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["kotlin","mobile-app-development","android","jetpack-compose","android-app-development"]},{"title":"2 Ways to Request Permissions in Jetpack Compose","pubDate":"2022-07-08 19:21:03","link":"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c?source=rss-89681abbf4e8------2","guid":"https://medium.com/p/fd81c4a702c","author":"Igor Stevanovic","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*xd2yFtJFHn5D9YQaY6yBKQ.jpeg","description":"\n<h4>The best ways to request permissions in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xd2yFtJFHn5D9YQaY6yBKQ.jpeg\"><figcaption>Photo by <a href=\"https://unsplash.com/@pathum_danthanarayana\">Pathum Danthanarayana</a> on\u00a0<a href=\"https://unsplash.com/\">Unsplash</a></figcaption></figure><p>Our first permission that we are gonna request will be Camera permission. To use the camera on our device, we need to request permission for it because it belongs to the \u201cdangerous\u201d ones right. First, we need to add this permission into the manifest file like\u00a0this:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.CAMERA\u201d /&gt;</pre>\n<p>After that, we can go to our Composable in which we need to request this permission and create a launcher for activity results like\u00a0this:</p>\n<a href=\"https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href\">https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href</a><p>We create a launcher for activity results with which we are gonna launch an Android built-in dialog for permission requests. Activity returns a boolean which tells us If permission is granted or not. If it is granted we open the camera and if not we could show some info dialog or whatever you want. After that, we will add a button whose onClickcallback calls the checkAndRequestCameraPermission function. This function looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href\">https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href</a><p>First, we check if the permission is already granted, if it is we open the camera and if it is not we request it via the launcher. Finally our main composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href\">https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href</a><p>Now we are gonna request two permissions for location. We can request both of them at the same time and no need to request them one by one. Permissions are ACCESS_COARSE_LOCATION and ACCESS_FINE_LOCATION<em>.</em> As we all know, the first step is to add them to our beloved manifest\u00a0file:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_COARSE_LOCATION\u201d /&gt;<br>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_FINE_LOCATION\u201d /&gt;</pre>\n<p>Then we are gonna add a launcher for activity results and a button for requesting these permissions in the main Composable. Like\u00a0this:</p>\n<a href=\"https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href\">https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href</a><p>Now we have an array of permissions and a launcher activity that is requesting multiple permissions. This activity is gonna show us a built-in dialog that requests every permission that we need. It returns a map of String (permission name) as a key and Boolean (granted or not) as a value. Function checkAndRequesstLocationPermissions looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href\">https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href</a><p>It will check every permission if it is granted or not. If all of them are granted we can use location, and if not we are gonna request those that we\u00a0need.</p>\n<h3>Accompanist permissions library</h3>\n<p>That was cool right, now I am gonna show you something even better. That is <a href=\"https://github.com/google/accompanist/tree/main/permissions\">accompanist permissions library</a>, they always make our lives easier. We can use their permissionState and PermissionRequired composable to manipulate with the result of requests even better. First, we are gonna add the dependency in the app-level build.gradle file:</p>\n<pre>implementation \u201ccom.google.accompanist:accompanist-permissions:0.23.1\u201d</pre>\n<p><strong>Note: </strong>At the of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>We are gonna request the same Camera permission, so don\u2019t forget to delete an app from your phone or clear app storage. First, we need to create permissionState which will track the state of our permission:</p>\n<pre>val permissionState = rememberPermissionState(permission = Manifest.permission.CAMERA)</pre>\n<p>After that, we are gonna create CameraPermission composable and pass it the permission state as a parameter so it can handle permission. Inside this composable, we are using the accompanist\u2019s PermissionRequired composable which takes in four parameters: <br>- permissionState: the state of our permission that we previously created<br>- permissionNotGrantedContent: content that should be shown after the permission is denied<br>- permissionNotAvailableContent: content that should be shown if the permission is not available<br>- content: Composable callback that will be called after the permission is granted<br>CameraPermission composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href\">https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because PermissionState is still experimental.</p>\n<p>So basically in our main composable, it looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href\">https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href</a><p>In the button onClick callback we just launch permission request with our permissionState, simple enough. Now we are gonna request multiple permissions for location. It is done similarly with a few modifications. Again, we first create the state of permissions:</p>\n<a href=\"https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href\">https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href</a><p><strong>Note:</strong> type of permissionsState is now MultiplePermissionState, where previously it was PermissionState.</p>\n<p>Next is to create LocationPermissions composable which contains PermissionsRequired accompanist\u2019s composable. It is similar to PermissionRequired, the difference is only in the first parameter which accepts now MultiplePermissionState as the parameter.</p>\n<a href=\"https://medium.com/media/59ddda8800691a558e06d2e8983137df/href\">https://medium.com/media/59ddda8800691a558e06d2e8983137df/href</a><p>And that\u2019s it. In our main composable we just launch multiple permission requests:</p>\n<a href=\"https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href\">https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href</a><p>Cool! As you can see accompanist permissions library gives us more flexibility and makes our life easier. All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/permissions\">Github\u00a0repo</a>.</p>\n<p>That would be all for this article, I hope you liked\u00a0it!</p>\n<pre>Connect with me on:</pre>\n<pre><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a></pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd81c4a702c\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>The best ways to request permissions in Jetpack\u00a0Compose</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xd2yFtJFHn5D9YQaY6yBKQ.jpeg\"><figcaption>Photo by <a href=\"https://unsplash.com/@pathum_danthanarayana\">Pathum Danthanarayana</a> on\u00a0<a href=\"https://unsplash.com/\">Unsplash</a></figcaption></figure><p>Our first permission that we are gonna request will be Camera permission. To use the camera on our device, we need to request permission for it because it belongs to the \u201cdangerous\u201d ones right. First, we need to add this permission into the manifest file like\u00a0this:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.CAMERA\u201d /&gt;</pre>\n<p>After that, we can go to our Composable in which we need to request this permission and create a launcher for activity results like\u00a0this:</p>\n<a href=\"https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href\">https://medium.com/media/524fafc0768760c20501c4f6c3a3470d/href</a><p>We create a launcher for activity results with which we are gonna launch an Android built-in dialog for permission requests. Activity returns a boolean which tells us If permission is granted or not. If it is granted we open the camera and if not we could show some info dialog or whatever you want. After that, we will add a button whose onClickcallback calls the checkAndRequestCameraPermission function. This function looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href\">https://medium.com/media/db0c1d2434f30ed365e0e19ec90fc6be/href</a><p>First, we check if the permission is already granted, if it is we open the camera and if it is not we request it via the launcher. Finally our main composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href\">https://medium.com/media/957b33cafbf9f3d7a7c9bf502c9e78f7/href</a><p>Now we are gonna request two permissions for location. We can request both of them at the same time and no need to request them one by one. Permissions are ACCESS_COARSE_LOCATION and ACCESS_FINE_LOCATION<em>.</em> As we all know, the first step is to add them to our beloved manifest\u00a0file:</p>\n<pre>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_COARSE_LOCATION\u201d /&gt;<br>&lt;uses-permission android:name=\u201dandroid.permission.ACCESS_FINE_LOCATION\u201d /&gt;</pre>\n<p>Then we are gonna add a launcher for activity results and a button for requesting these permissions in the main Composable. Like\u00a0this:</p>\n<a href=\"https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href\">https://medium.com/media/93d241b354b66da7b9c752aa6f3c26d3/href</a><p>Now we have an array of permissions and a launcher activity that is requesting multiple permissions. This activity is gonna show us a built-in dialog that requests every permission that we need. It returns a map of String (permission name) as a key and Boolean (granted or not) as a value. Function checkAndRequesstLocationPermissions looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href\">https://medium.com/media/e01c3d6dcf4f2a95a7bdc9c3fa5bef2c/href</a><p>It will check every permission if it is granted or not. If all of them are granted we can use location, and if not we are gonna request those that we\u00a0need.</p>\n<h3>Accompanist permissions library</h3>\n<p>That was cool right, now I am gonna show you something even better. That is <a href=\"https://github.com/google/accompanist/tree/main/permissions\">accompanist permissions library</a>, they always make our lives easier. We can use their permissionState and PermissionRequired composable to manipulate with the result of requests even better. First, we are gonna add the dependency in the app-level build.gradle file:</p>\n<pre>implementation \u201ccom.google.accompanist:accompanist-permissions:0.23.1\u201d</pre>\n<p><strong>Note: </strong>At the of writing this article, 0.23.1 was the newest stable version. Check if there is a newer\u00a0version.</p>\n<p>We are gonna request the same Camera permission, so don\u2019t forget to delete an app from your phone or clear app storage. First, we need to create permissionState which will track the state of our permission:</p>\n<pre>val permissionState = rememberPermissionState(permission = Manifest.permission.CAMERA)</pre>\n<p>After that, we are gonna create CameraPermission composable and pass it the permission state as a parameter so it can handle permission. Inside this composable, we are using the accompanist\u2019s PermissionRequired composable which takes in four parameters: <br>- permissionState: the state of our permission that we previously created<br>- permissionNotGrantedContent: content that should be shown after the permission is denied<br>- permissionNotAvailableContent: content that should be shown if the permission is not available<br>- content: Composable callback that will be called after the permission is granted<br>CameraPermission composable looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href\">https://medium.com/media/6b1fc56bbc8e28f8ce55434c58bbb4be/href</a><p><strong>Note: </strong>we need to add ExperimentalPermissionsApi annotation because PermissionState is still experimental.</p>\n<p>So basically in our main composable, it looks like\u00a0this:</p>\n<a href=\"https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href\">https://medium.com/media/8b2f83f0536e48792845d615f987af0a/href</a><p>In the button onClick callback we just launch permission request with our permissionState, simple enough. Now we are gonna request multiple permissions for location. It is done similarly with a few modifications. Again, we first create the state of permissions:</p>\n<a href=\"https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href\">https://medium.com/media/f59a4a25a42c8339232b24a82ae31259/href</a><p><strong>Note:</strong> type of permissionsState is now MultiplePermissionState, where previously it was PermissionState.</p>\n<p>Next is to create LocationPermissions composable which contains PermissionsRequired accompanist\u2019s composable. It is similar to PermissionRequired, the difference is only in the first parameter which accepts now MultiplePermissionState as the parameter.</p>\n<a href=\"https://medium.com/media/59ddda8800691a558e06d2e8983137df/href\">https://medium.com/media/59ddda8800691a558e06d2e8983137df/href</a><p>And that\u2019s it. In our main composable we just launch multiple permission requests:</p>\n<a href=\"https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href\">https://medium.com/media/8fbe937d48ebe2c6ef565b9756119a80/href</a><p>Cool! As you can see accompanist permissions library gives us more flexibility and makes our life easier. All of the source code you can find in my <a href=\"https://github.com/Giga99/MediumRepos/tree/main/permissions\">Github\u00a0repo</a>.</p>\n<p>That would be all for this article, I hope you liked\u00a0it!</p>\n<pre>Connect with me on:</pre>\n<pre><a href=\"https://github.com/Giga99\">Github</a><br><a href=\"https://twitter.com/igor_s1999\">Twitter</a></pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd81c4a702c\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c\">2 Ways to Request Permissions in Jetpack Compose</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["android","jetpack-compose","android-app-development","compose","kotlin"]}]}